dnl>
dnl> -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
dnl> this file is processed via 'autoconf' to produce the 'configure' script
dnl> -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
dnl>
dnl> Copyright (c) 1998 - 2000 Luca Deri <deri@ntop.org>
dnl> Updated 1Q 2000 Rocco Carbone <rocco@ntop.org>
dnl>
dnl> -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
dnl> This program is free software; you can redistribute it and/or modify
dnl> it under the terms of the GNU General Public License as published by
dnl> the Free Software Foundation; either version 2 of the License, or
dnl> (at your option) any later version.
dnl>
dnl> This program is distributed in the hope that it will be useful,
dnl> but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl> GNU General Public License for more details.
dnl>
dnl> You should have received a copy of the GNU General Public License
dnl> along with this program; if not, write to the Free Software
dnl> Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
dnl>


dnl>
dnl> standard Autoconf prolog
dnl>
AC_PREREQ(2.13)
AC_REVISION([1.0])

CONFIGURE_PARAMETERS=$*

dnl>
dnl> version and name of the game
dnl>
NTOP_MAJOR_VERSION=2
NTOP_MINOR_VERSION=1
NTOP_MICRO_VERSION=1
NTOP_INTERFACE_AGE=0
NTOP_BINARY_AGE=0
NTOP_VERSION=$NTOP_MAJOR_VERSION.$NTOP_MINOR_VERSION.$NTOP_MICRO_VERSION
NTOP_VERSION_EXTRA=""

dnl>
dnl> standard libtool versioning
dnl>
LT_RELEASE=$NTOP_MAJOR_VERSION.$NTOP_MINOR_VERSION
LT_CURRENT=`expr $NTOP_MICRO_VERSION - $NTOP_INTERFACE_AGE`
LT_REVISION=$NTOP_INTERFACE_AGE
LT_AGE=`expr $NTOP_BINARY_AGE - $NTOP_INTERFACE_AGE`

NTOP_VERSION_INFO=$LT_CURRENT:$LT_REVISION:$LT_AGE
NTOP_RELEASE=$LT_RELEASE

AC_SUBST(NTOP_VERSION_INFO)
AC_SUBST(SO_VERSION_PATCH)
AC_SUBST(NTOP_RELEASE)


PACKAGE=ntop
VERSION=$NTOP_VERSION


echo
echo "Welcome to $PACKAGE, Version $VERSION"
echo "[Copyright (c) 1998-2002 Luca Deri <deri@ntop.org>]"
echo

dnl>
dnl> variables for autoconf
dnl>

dnl>
dnl> By default ntop is compiled in multithread mode using
dnl> async address resolution unless reset by command line options.
ac_disable_multithread=no
ac_disable_async_resolution=no
multithread_mode=yes

dnl>
dnl> By default the configuration script will try to link against OpenSSL library, if available.
dnl> The choice to disable this feature is left to the user.
ac_disable_openssl=no

dnl>
dnl> By default the configuration script will try to link against GNU readline (and curses) library, if available.
dnl> The choice to disable this feature is left to the user.
ac_disable_readline=no
ac_disable_curses=no

dnl>
dnl> By default the configuration script will try to link against GDChart library, if available.
dnl> The choice to disable this feature is left to the user.
ac_disable_gdchart=no

dnl>
dnl> By default the configuration script will not try to link against the TCP wrapper library, if available.
dnl> The choice to enable this feature is left to the user.
ac_enable_tcpwrap=no

dnl>
dnl> By default, do NOT ignore sigpipe
dnl>
ac_ignore_sigpipe=no

dnl>
dnl> By default the configuration script will try to compile all the plugins in its own directory.
dnl> The choice to disable this feature is left to the user.
PLUGINS=plugins
ac_disable_plugins=no

dnl>
dnl> By default the configuration script will try to compile the interactive 'intop' program in its own directory.
dnl> The choice to disable this feature is left to the user.
INTOP=intop
ac_disable_intop=no

dnl>
dnl> Option to show where we're testing for openssl
ac_enable_showopenssltests=no

dnl>
dnl> *** ToBeRocked ***
dnl> user customizable section
dnl>

dnl>
dnl> By default only enable SSLv2.  This allows for v3.
dnl> The choice to enable this feature is left to the user.
ac_enable_sslv3=no

dnl>
dnl> look for an unique ntop's source file in the distribution
dnl> and perform initialization steps, such as loading the cache
dnl>
AC_INIT(ntop.c)
echo

dnl>
dnl> canonicalize the host, target, and build system types
dnl>
AC_CANONICAL_SYSTEM
echo

dnl>
dnl> perform program name transformation
dnl>
AC_ARG_PROGRAM

dnl>
dnl> initialize the macro package
dnl> and check for working GNU auto``stuff''
dnl>
AM_INIT_AUTOMAKE(ntop, $VERSION, lderi)
echo

dnl>
dnl> initialize the libtool macro package to
dnl> automatically include dependencies of:
dnl> ranlib, ar, gcc, cc, ld, nm, ln
dnl>

dnl>
dnl> checks for UNIX variants
dnl>
dnl> quoted from a public mailing list
dnl>
dnl> "Believe me, I'm all too aware of the nightmare of shared libraries
dnl>  on the various systems.  My comment about AIX stems from two things.
dnl>  One, guess what the extension for shared libs is on AIX.  ".a"  Guess
dnl>  what the static lib extension is.  ".a"  What dipshit was buttsnorkeling
dnl>  himself coming up with *that* brilliant idea?  And two, even if you
dnl>  do build a shared library, they fail to work 99% of the time.
dnl>  *cough* Perl *cough*  So as a development platform, I hate AIX with
dnl>  a passion.  Give me Solaris and HP-UX any day."
dnl>
dnl>  Michael Jennings  <mej@eterm.org>  http://www.eterm.org
dnl>  Software Engineer, VA Linux Systems Author, Eterm (www.eterm.org)
dnl>

dnl> case "$host" in
dnl>    AIX is ___really___ incompatible with libtooland shared libraries, so....
dnl>    disable the shared flag to no
dnl>
dnl>     *-ibm-aix* )
dnl>         enable_shared=no
dnl>         enable_static=yes
dnl>         ;;
dnl> 
dnl>     * )
dnl>         enable_shared=yes
dnl>         enable_static=yes
dnl>         ;;
dnl> esac

dnl>
dnl> checks for required development tools
dnl>

echo
echo "Step 1. Looking for required development tools...."
echo

dnl> AM_DISABLE_SHARED
AM_ENABLE_SHARED
AM_PROG_LIBTOOL
echo

dnl> set default loader
CCLD=$CC

AM_PROG_CC_STDC
AC_PROG_CPP
AC_SET_MAKE
AC_PROG_INSTALL

dnl>
dnl> you can also check for debugging and optimization
dnl>
AC_CHECK_DEBUGGING
AC_CHECK_OPTIMIZE

dnl>
dnl> set reasonable defaults here
dnl>
DEFS="-DHAVE_CONFIG_H"
CFLAGS="-g $CFLAGS"

dnl Test endianness
AC_TRY_RUN([

int main()
{
        short s = 1;
        short* ptr = &s;
        unsigned char c = *((char*)ptr);
        return c;       
}

]
, [ AC_DEFINE(NTOP_BIG_ENDIAN) ]
, [ AC_DEFINE(NTOP_LITTLE_ENDIAN) ]
, [ AC_DEFINE(NTOP_BIG_ENDIAN) ]
)

dnl>
dnl> force configure to use current directory
dnl>
AC_CONFIG_AUX_DIR(.)

dnl>
dnl> make NTOPDIR the default for the installation
dnl>
AC_PREFIX_DEFAULT(${NTOPDIR:-/usr/local})


dnl>
dnl> generate the config header
dnl>
umask 002
AM_CONFIG_HEADER(config.h)


dnl>
dnl> Yup!  Avoid to initialize maintainer mode.
dnl> This is a pain if you have SUBDIRS.
dnl>
dnl> AM_MAINTAINER_MODE


echo
echo "Step 2. Processing user options...."
echo

AC_ARG_WITH(void, [  +----------------------------------------------------------------------------+])

AC_ARG_WITH(pcap-root, [  --with-pcap-root=DIR    LBNL pcap source tree located in DIR], PCAP_ROOT="$withval", PCAP_ROOT=)

AC_ARG_WITH(gdbm-root, [  --with-gdbm-root=DIR    GNU gdbm source tree located in DIR], GDBM_ROOT="$withval", GDBM_ROOT=)

AC_ARG_WITH(ossl-root, [  --with-ossl-root=DIR    OpenSSL source tree located in DIR], OSSL_ROOT="$withval", OSSL_ROOT=)

AC_ARG_WITH(gdchart-root, [  --with-gdchart-root=DIR GDChart source tree located in DIR], GDCHART_ROOT="$withval", GDCHART_ROOT="../gdchart0.94c")

AC_ARG_WITH(void, [  +----------------------------------------------------------------------------+])

dnl>
dnl> Give the user an option to compile a micro version of ntop
dnl> for embedded systems
dnl>
AC_ARG_ENABLE(micro-ntop, [  --enable-micro-ntop     compile a slim version of ntop [default=disabled]], ac_micro_ntop="yes", ac_micro_ntop="no")

dnl>
dnl> Give the user an option to compile without multithread support,
dnl> for example to start a debugging session.
dnl>
AC_ARG_ENABLE(mt, [  --disable-mt            disable multithread support also if available [default=enabled]], ac_disable_multithread="yes", ac_disable_multithread="no")

dnl>
dnl> Give the user an option to compile without MySQL support
dnl>
AC_ARG_ENABLE(mysql, [  --enable-mysql         enable MySQL support also if available [default=disabled]], ac_mysql="yes", ac_mysql="no")

dnl>
dnl> Give the user an option to compile without the HTTPS support provided by OpenSSL.
dnl>
AC_ARG_ENABLE(ssl, [  --disable-ssl           disable HTPPS support also if OpenSSL is available [default=enabled]], ac_disable_openssl="yes", ac_disable_openssl="no")

dnl>
dnl> Give the user an option to compile without the GNU readline support.
dnl>
AC_ARG_ENABLE(readline, [  --disable-readline      disable GNU readline support also if available [default=enabled]], ac_disable_readline="yes", ac_disable_readline="no")

dnl>
dnl> Give the user an option to compile without the curses support.
dnl>
AC_ARG_ENABLE(curses, [  --disable-curses        disable curses support also if available [default=enabled]], ac_disable_curses="yes", ac_disable_curses="no")

dnl>
dnl> Give the user an option to compile without the GDChart support.
dnl>
AC_ARG_ENABLE(gdchart, [  --disable-gdchart       disable GDChart support also if available [default=enabled]], ac_disable_gdchart="yes", ac_disable_gdchart="no")

dnl>
dnl> Give the user an option to compile with the TCP Wrapper support.
dnl>
AC_ARG_ENABLE(tcpwrap, [  --enable-tcpwrap        enable TCP Wrap support if available [default=disabled]], ac_enable_tcpwrap="yes")

dnl>
dnl> Give the user an option to RUN with SIGPIPE ignored
dnl>
AC_ARG_ENABLE(ignoresigpipe, [  --enable-ignoresigpipe  Ignore SIGPIPE errors [default=do not ignore]], ac_enable_ignoresigpipe="yes", ac_enable_ignoresigpipe="no")

dnl>
dnl> Give the user an option to RUN with the SSL Watchdog (EXPERIMENTAL)
dnl>
AC_ARG_ENABLE(sslwatchdog, [  --enable-sslwatchdog    Watchdog for ssl hangups (Netscape 6.2.2) [default=disabled]], ac_enable_sslwatchdog="yes", ac_enable_sslwatchdog="no")

dnl>
dnl> Give the user an option to compile with sslv3 support.
dnl>
AC_ARG_ENABLE(sslv3, [  --enable-sslv3          enable ssl v3 support if available [default=disabled]], ac_enable_sslv3="yes")

dnl>
dnl> Give the user an option to show the openssl tests...
dnl>
AC_ARG_ENABLE(showopenssltests, [  --enable-showopenssltests show tests for openssl libraries [default=disabled]], ac_enable_showopenssltests="yes")

AC_ARG_WITH(void, [  +----------------------------------------------------------------------------+])

dnl>
dnl> Give the user an option to avoid to compile all the plugins.
dnl>
AC_ARG_ENABLE(plugins, [  --disable-plugins       disable compilation of plugins, also if they are available [default=disabled]], ac_disable_plugins="yes")

dnl>
dnl> Give the user an option to avoid to compile the interactive version.
dnl>
AC_ARG_ENABLE(intop, [  --disable-intop         disable compilation of intop [default=enabled]], ac_disable_intop="yes")


dnl>
dnl>
dnl> checks for special support for platform/compiler
dnl> $CC, $CFLAGS, $LDFLAGS and $LIBS are my friends
dnl>

echo
echo "Step 3. Checking for special support for platform/compiler...."
echo
DYN_FLAGS=
SO_VERSION_PATCH=
MORESOURCES=
MOREOBJECTS=

case "$host:$CC" in
    *-ibm-aix4.1.*:gcc )

dnl>    on my RS/6000 system I was really unable to link using gcc, so I switched
dnl>    to native AIX XL C Compiler. I don't know how to link with gcc.
dnl>
dnl>    Moreover I needed a local copy of the libgcc.a because the
dnl>    linker refused to create a binary from the installed archive.
dnl>    Again, I don't know why.
dnl>
        GCCLIB=`gcc -print-libgcc-file-name`
        cp $GCCLIB .
        LIBS="-L. -lgcc ${LIBS}"

dnl>    To link against the getmsg system call you must import the /lib/pse.exp
        CCLD="cc -bI:/lib/pse.exp"
        ;;

    *-ibm-aix4.*:cc* )

        echo "Oh no!  *cough* AIX *cough* without GCC!  Me poor!"

        # To link against the getmsg system call you must import the /lib/pse.exp
dnl>        CFLAGS=
dnl>        LDFLAGS="-bI:/lib/pse.exp $LDFLAGS"
        ;;

    *-sun-solaris2.5.1:* )
        AC_DEFINE(NEED_INET_ATON)
        ;;

    *openbsd* )
        SO_VERSION_PATCH=.0.0
        ;;

    *darwin* )
        CFLAGS="-no-cpp-precomp -DDARWIN $CFLAGS"
	DYN_FLAGS="-bundle -flat_namespace -undefined suppress $DYN_FLAGS"
        ;;

dnl>    *-sun-solaris2*:cc )
dnl>        # shut-up harmless warnings caused by do-while macros on Solaris
dnl>        test ".$ac_cv_prog_gcc" = ".no" && CFLAGS="$CFLAGS -w"
dnl>        ;;
esac


dnl>
dnl> checks for system header files
dnl>

echo
echo "Step 4. Looking for both required and optional system headers...."
echo

AC_HEADER_STDC
dnl> AC_HEADER_TIME

dnl> MANDATORY general purpose headers
AC_HAVE_HEADERS(pwd.h stdio.h errno.h stdlib.h unistd.h string.h signal.h fcntl.h dnl
                sys/types.h sys/time.h sys/wait.h sys/stat.h sys/ioctl sys/un.h)

dnl> OPTIONAL general purpose headers
AC_CHECK_HEADERS(sys/select.h sys/ldr.h sys/sockio.h dl.h dirent.h dlfcn.h)

dnl> OPTIONAL security headers
AC_CHECK_HEADERS(security/pam_appl.h shadow.h crypt.h)

AC_MSG_CHECKING(if ether_header uses ether_addr structs)
AC_CACHE_VAL(ac_cv_ether_header_has_ea,
    LBL_SAVE_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS $V_INCLS"
    AC_TRY_COMPILE([
#       include <sys/types.h>
#       if __STDC__
        /* osf3 has REALLY good prototyes */
        struct mbuf;
        struct rtentry;
#       endif
#       include <sys/socket.h>
#       include <net/if.h>
#       include <netinet/in.h>
#       include <netinet/if_ether.h>],
        [u_int i =
             sizeof(((struct ether_header *)0)->ether_dhost.ether_addr_octet)],
        ac_cv_ether_header_has_ea=yes,
        ac_cv_ether_header_has_ea=no)
    CFLAGS="$LBL_SAVE_CFLAGS")
AC_MSG_RESULT($ac_cv_ether_header_has_ea)
if test $ac_cv_ether_header_has_ea = yes ; then
        AC_DEFINE(ETHER_HEADER_HAS_EA)
fi


dnl>
dnl> check for ip6 address used by sFlow...
dnl>
AC_MSG_CHECKING(if in6_addr is defined)
AC_CACHE_VAL(ac_cv_in6_addr_has_ea,
    LBL_SAVE_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS $V_INCLS"
    AC_TRY_COMPILE([
#       include <sys/types.h>
#       include <netinet/in.h>
#       include <netinet/in_systm.h>
#       include <sys/socket.h>
#       include <netinet/ip.h>],
        [struct in6_addr tmp;],
        ac_cv_in6_addr_has_ea=yes,
        ac_cv_in6_addr_has_ea=no)
    CFLAGS="$LBL_SAVE_CFLAGS")
AC_MSG_RESULT($ac_cv_in6_addr_has_ea)
if test $ac_cv_in6_addr_has_ea = yes ; then
        AC_DEFINE(HAVE_IN6_ADDR)
fi


dnl>
dnl> OPTIONAL MySQL library - check for mysql.h and mysqlclient.so
dnl>

if test ".$ac_mysql" = ".yes"; then
        have_mysql=no
        AC_CHECK_HEADERS(mysql/mysql.h, [
                AC_MSG_CHECKING([for library for mySQL (client)])
                _libs=${LIBS}
                LIBS="${LIBS} -lmysqlclient"
                AC_TRY_LINK([#include <mysql/mysql.h>], [MYSQL *mysql; mysql_shutdown(mysql);], 
		[ AC_MSG_RESULT(yes)
		  have_mysql=yes],
		[ LIBS="${_libs} -L/usr/lib/mysql -lmysqlclient"
                AC_TRY_LINK([#include <mysql/mysql.h>], 
		[MYSQL *mysql;mysql_shutdown(mysql);], [
                    AC_MSG_RESULT(yes - /usr/lib/mysql)
                    have_mysql=yes], [

                    have_mysql=no
                    LIBS=${_libs}])])], [

                have_mysql=no])

        if test ".$have_mysql" = ".yes"; then
                AC_DEFINE(HAVE_MYSQL)
        else
                AC_MSG_ERROR([could not find -lmysqlclient, rerun without --enable-mysql])
        fi
fi

dnl> OPTIONAL curses headers
if test ".$ac_disable_curses" = ".no"; then

  if test -f "/usr/include/ncurses.h"; then
    echo "checking for ncurses.h... yes"
    AC_DEFINE(HAVE_NCURSES_H)
  else
    if test -f "/usr/include/curses.h"; then
      echo "checking for curses.h... yes"
      AC_DEFINE(HAVE_CURSES_H)
    else
      AC_MSG_WARN([It looks that you don't have (n)curses.h installed hence intop will *not* be built.])
     ac_disable_intop=yes
    fi
  fi
fi


dnl> OPTIONAL memory related headers
AC_CHECK_HEADERS(alloca.h)

dnl> OPTIONAL micro ntop
if test ".$ac_micro_ntop" = ".yes"; then
	AC_DEFINE(MICRO_NTOP)
fi

dnl> OPTIONAL thread headers
if test ".$ac_disable_multithread" = ".no"; then
  AC_CHECK_HEADERS(sched.h sys/sched.h semaphore.h pthread.h)
fi

dnl> MANDATORY universal headers for network programming code
AC_HAVE_HEADERS(sys/socket.h netdb.h netinet/in.h arpa/inet.h net/if.h)
AC_HAVE_HEADERS(netinet/in_systm.h netinet/ip.h netinet/ip_icmp.h netinet/udp.h netinet/tcp.h)

dnl> OPTIONAL headers for network programming headers
AC_CHECK_HEADERS(netinet/if_ether.h arpa/nameser.h net/ethernet.h ethertype.h if.h net/bpf.h)

dnl> OPTIONAL syslog headers
AC_CHECK_HEADERS(sys/syslog.h, [ac_sys_syslog_h="yes"], [ac_sys_syslog_h="no"])
AC_CHECK_HEADERS(syslog.h, [ac_syslog_h="yes"], [ac_syslog_h="no"])

dnl> Test for facilitynames
AC_MSG_CHECKING([glibc facilitynames in sys/syslog.h or syslog.h])
if test $ac_sys_syslog_h = yes ||
   test $ac_syslog_h = yes ; then
    AC_TRY_COMPILE([
        #include "confdefs.h"
        #include <stdarg.h>
        #include <stdio.h>
        #define SYSLOG_NAMES
        #if defined(HAVE_SYS_SYSLOG_H)
        #include <sys/syslog.h>
        #elif defined(HAVE_SYSLOG_H)
        #include <syslog.h>
        #endif],
        [void * x = (void*) &(facilitynames[0]);],
        AC_MSG_RESULT(yes)
        ac_has_facilitynames=yes,
        AC_MSG_RESULT(no)
        ac_has_facilitynames=no)
else
    AC_MSG_RESULT(no)
    ac_has_facilitynames=no
fi
if test $ac_has_facilitynames = yes ; then
    AC_DEFINE(HAVE_FACILITYNAMES)
fi

dnl> OPTIONAL UCD-SNMP
dnl> AC_HAVE_HEADERS(ucd-snmp/ucd-snmp-agent-includes.h)


dnl>
dnl> check whether we've to define essential typedefs
dnl> u_int32_t u_int16_t u_int8_t
dnl> int32_t   int16_t   int8_t

AC_CHECK_TYPEDEF(u_int64_t, sys/types.h)
AC_CHECK_TYPEDEF(uint64_t, sys/types.h)
AC_CHECK_TYPEDEF(u_int32_t, sys/types.h)
AC_CHECK_TYPEDEF(u_int16_t, sys/types.h)
AC_CHECK_TYPEDEF(u_int8_t, sys/types.h)
AC_CHECK_TYPEDEF(int64_t, sys/types.h)
AC_CHECK_TYPEDEF(int32_t, sys/types.h)
AC_CHECK_TYPEDEF(int16_t, sys/types.h)
AC_CHECK_TYPEDEF(int8_t, sys/types.h)

dnl>
dnl> check for reentrant library routines
dnl>
AC_CHECK_FUNCS(strtok_r)
AC_CHECK_FUNCS(localtime_r)
AC_CHECK_FUNCS(ctime_r)
AC_CHECK_FUNCS(snprintf)
AC_CHECK_FUNCS(getipnodebyaddr)
AC_CHECK_FUNCS(gethostbyaddr_r)
AC_CHECK_LIB(c, gethostbyaddr_r, AC_DEFINE(HAVE_GETHOSTBYADDR_R), 
AC_CHECK_LIB(nsl, gethostbyaddr_r, AC_DEFINE(HAVE_GETHOSTBYADDR_R)) )

dnl> Check for additional functions
AC_CHECK_FUNCS(strsep)

echo
echo "Step 5. Looking for required system libraries...."
echo


dnl>
dnl> check for `dlopen' in -ldl (MANDATORY)
dnl>
AC_CHECK_LIB(dl, dlopen)

dnl>
dnl> check for `backtrace' in -lc
dnl>
AC_CHECK_LIB(c, backtrace, AC_DEFINE(HAVE_BACKTRACE))

dnl>
dnl> check for `crypt' in -lcrypt (MANDATORY)
dnl>
AC_CHECK_FUNC(crypt, , AC_CHECK_LIB(c, crypt, ,
  [AC_CHECK_LIB(crypt, crypt, MORELIBS="$MORELIBS -lcrypt",
    AC_MSG_ERROR(you need the crypt library to build ntop), $MORELIBS)]))

AC_CHECK_LIB(kstat, kstat_lookup)
AC_CHECK_LIB(c, getopt_long, AC_DEFINE(HAVE_GETOPT_LONG))

dnl>
dnl> GDChart uses functions from math library,
dnl> so make sure we link against the math library if needed
dnl>
dnl> check for `sin' in -lm (MANDATORY)
dnl>
if test ".$ac_disable_gdchart" = ".no"; then
AC_CHECK_LIB(c, sin,  AC_MSG_CHECKING([The standard C library includes the math lib]),
  AC_CHECK_LIB(m, sin, MORELIBS="$MORELIBS -lm", [
echo "ERROR: You need libm to build ntop with GDChart support. Verify that you have libm.a or libm.so installed.";
             AC_MSG_ERROR([Fatal: libm not found.])], $MORELIBS))
fi

dnl>
dnl> Ignore SIGPIPE?
dnl>
if test ".$ac_enable_ignoresigpipe" = ".yes"; then
  AC_DEFINE(YES_IGNORE_SIGPIPE)
fi

dnl>
dnl> Networking libraries
dnl>
dnl> check for `gethostname' or `gethostbyname' in -lnsl
dnl> and then check for `accept' in -lsocket
dnl> and then check for `inet_aton' in -lresolv
dnl>
AC_CHECK_LIB(nsl, gethostname)
if test ".`echo $LIBS | grep nsl`" = .; then
    AC_CHECK_LIB(nsl, gethostbyname)
fi
AC_CHECK_LIB(socket, accept)
AC_CHECK_LIB(resolv, inet_aton)

dnl> both Solaris and AIX lack definition of `getdomainname'
case "$host" in
    *-sun-solaris2* )
        AC_DEFINE(NEED_GETDOMAINNAME)
        ;;
    *-ibm-aix4.[12].* )
        AC_DEFINE(NEED_GETDOMAINNAME)
        ;;
esac

dnl>
dnl> TCP Wrappers library
dnl> check for tcpd.h header and `hosts_access' in -lwrap
dnl>
dnl>  Replacement code shamelessly ripped off from openLDAP (BMS, 6-2002)
dnl>


 dnl ----------------------------------------------------------------
if test ".$ac_enable_tcpwrap" = ".yes"; then
	have_wrappers=no
	AC_CHECK_HEADERS(tcpd.h, [
                AC_MSG_CHECKING([TCP Wrapper support requested, via command line option, checking for library])
		_libs=${LIBS}
		LIBS="${LIBS} -lwrap"
		AC_TRY_LINK([#include <tcpd.h>
 int allow_severity = 0;
 int deny_severity  = 0;

struct request_info *req;], [
		hosts_access(req)], [
		AC_MSG_RESULT(yes)
		have_wrappers=yes
		LIBS=${_libs}], [

		# try with -lnsl
		LIBS="${LIBS} -lnsl"
		AC_TRY_LINK([#include <tcpd.h>
int allow_severity = 0;
int deny_severity  = 0;

struct request_info *req;], [
		hosts_access(req)], [

		AC_MSG_RESULT(yes)
		have_wrappers=yes
		LIBS="${_libs} -lnsl"], [

		AC_MSG_RESULT(no)
		have_wrappers=no
		LIBS=${_libs}])],

		have_wrappers=no)])
 
	if test ".$have_wrappers" = ".yes"; then
		AC_DEFINE(HAVE_TCPD_H)
                AC_DEFINE(HAVE_LIBWRAP)
                MORELIBS="$MORELIBS -lwrap"
 	else
		AC_MSG_ERROR([could not find -lwrap. rerun without --enable-tcpwrap])
 	fi
fi
 

dnl>
dnl> (n)curses Library (optional)
dnl> check for `initscr' in -lncurses or in -lcurses
dnl>
dnl> Do not perform any check for the curses library,
dnl> if the user decided to compile without curses support.
dnl>
LIBCURSES=
if test ".$ac_disable_curses" = ".no"; then
  AC_CHECK_LIB(ncurses, initscr, LIBCURSES="-lncurses")
  if test ".`echo $LIBCURSES | grep curses`" = .; then
      AC_CHECK_LIB(curses, initscr, LIBCURSES="-lcurses", ac_disable_intop=yes)
  fi
else
  AC_MSG_WARN([Curses support disabled via command line option!])
 ac_disable_intop=yes
fi


dnl>
dnl> Thread Library (optional)
dnl> check for `pthread_create' in -lpthread
dnl>
dnl> Do not perform any check for the thread library,
dnl> if the user decided to compile without multithread support.
dnl>
if test ".$ac_disable_multithread" = ".no"; then
  AC_CHECK_LIB(pthread, pthread_create)
  if test ".`echo $LIBS | grep pthread`" != .; then
dnl>
dnl> check for `sem_init' in -lposix4
dnl>
     AC_CHECK_LIB(posix4, sem_init)
     AC_DEFINE(MULTITHREADED)
     AC_DEFINE(ASYNC_ADDRESS_RESOLUTION)
  else
 AC_CHECK_LIB(pthreads, pthread_create)
  if test ".`echo $LIBS | grep pthread`" != .; then
dnl>
dnl> check for `sem_init' in -lposix4
dnl>
     AC_CHECK_LIB(posix4, sem_init)
     AC_DEFINE(MULTITHREADED)
     AC_DEFINE(ASYNC_ADDRESS_RESOLUTION)
  else
     AC_CHECK_LIB(c_r, pthread_create)
     if test ".`echo $LIBS | grep c_r`" != .; then
     AC_DEFINE(MULTITHREADED)
     AC_DEFINE(ASYNC_ADDRESS_RESOLUTION)
    else
     multithread_mode=no
    fi
  fi
fi
else
  AC_MSG_WARN([Multithread support disabled via command line option!])
  multithread_mode=no
fi

dnl>
dnl> GNU ReadLine Library (optional)
dnl> check for `readline' in -lreadline
dnl>  AC_MSG_CHECKING([for GNU readline Library (optional package)])
dnl>
LIBREADLINE=
LIBTERMCAP=
if test ".$ac_disable_readline" = ".no"; then

dnl>
dnl> Make sure we link termcap with readline if we aren't already
dnl> linking curses or termcap
dnl>
  READLIBS=$LIBCURSES
  case "$LIBCURSES" in
    *termcap*|*curses*)
    ;;
    *)
    AC_CHECK_LIB(termcap, tgetent, LIBTERMCAP="-ltermcap")
    READLIBS="$READLIBS $LIBTERMCAP"
    ;;
  esac

  AC_CHECK_HEADERS(readline/readline.h)
  AC_CHECK_LIB(readline, readline, LIBREADLINE="-lreadline", ,$READLIBS)
  if test "$LIBREADLINE" != "" ; then
    AC_DEFINE(HAVE_READLINE)
    LIBREADLINE="$LIBREADLINE $LIBTERMCAP"
  fi
fi


echo
echo "Step 6. Looking for required GPLed libraries...."
echo

dnl>
dnl> Packet Capture Library by Lawrence Berkeley National Laboratory - Network Research Group
dnl>

dnl> order as follow
dnl> 1. user defined libpcap development tree
dnl> 2. standard installation in /usr/lib and /usr/include respectively
dnl> 3. default package installation in /usr/local/lib and /usr/local/include respectively
dnl> 4. libpcap-0.4 development tree under the same ntop's root directory or in a subdir

AC_MSG_CHECKING([for LBL Packet Capture Library (required package)])

dnl>
dnl> user defined directory passed as option at configuration time
dnl>
if test ".${PCAP_ROOT}" != .; then
  if test -d $PCAP_ROOT &&
     test -r $PCAP_ROOT/libpcap.a &&
     test -r $PCAP_ROOT/pcap.h; then
       PCAP_ROOT=`cd ${PCAP_ROOT} && pwd`
       CORELIBS="${CORELIBS} -L$PCAP_ROOT -lpcap"
       INCS="${INCS} -I$PCAP_ROOT"
       AC_MSG_RESULT([found in $PCAP_ROOT])
  else
    AC_MSG_RESULT([not found in ${PCAP_ROOT}])
    AC_MSG_RESULT([             *** FATAL ERROR ***             ])
    AC_MSG_RESULT([ It looks that you don't have some files needed to use the pcap library.])
    AC_MSG_RESULT([ Please check the source tree, compile and, optionally, install the software.])
    AC_MSG_RESULT([ When finished please re-run this program.])
    AC_MSG_RESULT([ You can download the latest source tarball at http://www.tcpdump.org])
    AC_MSG_ERROR([ The LBL Packet Capture Library development tree seems corrupted or incomplete!])
  fi
dnl>
dnl> default installation as defined in latest available libpcap-0.4a6
dnl>
elif test -d /usr/local &&
     test -r /usr/local/lib/libpcap.a &&
     test -r /usr/local/include/pcap.h; then
       PCAP_ROOT="/usr/local"
       CORELIBS="${CORELIBS} -L$PCAP_ROOT/lib -lpcap"
       INCS="${INCS} -I$PCAP_ROOT/include"
       AC_MSG_RESULT([found in $PCAP_ROOT])
dnl>
dnl> installation used by most packagers
dnl>
elif test -r /usr/lib/libpcap.a &&
     test -r /usr/include/pcap.h; then
       PCAP_ROOT="standard installation"
       CORELIBS="${CORELIBS} -lpcap"
       AC_MSG_RESULT([found in $PCAP_ROOT])
dnl>
dnl> unusual and more complex installation used by some packagers
dnl> (e.g. Red Hat Linux)
dnl>
elif test -r /usr/lib/libpcap.a &&
     test -r /usr/include/pcap/pcap.h; then
       PCAP_ROOT="semi-standard installation"
       CORELIBS="${CORELIBS} -lpcap"
       INCS="${INCS} -I/usr/include/pcap"
       AC_MSG_RESULT([found in $PCAP_ROOT])
dnl>
dnl> on place source tree under the same ntop's root
dnl>
elif test -d ../libpcap-0.4 &&
     test -r ../libpcap-0.4/libpcap.a &&
     test -r ../libpcap-0.4/pcap.h; then
       PCAP_ROOT=`cd ../libpcap-0.4 && pwd`
       CORELIBS="${CORELIBS} -L$PCAP_ROOT -lpcap"
       INCS="${INCS} -I$PCAP_ROOT"
       AC_MSG_RESULT([found in $PCAP_ROOT])
dnl>
dnl> on place source tree under the same ntop's root
dnl>
elif test -d ../libpcap-0.4a6 &&
     test -r ../libpcap-0.4a6/libpcap.a &&
     test -r ../libpcap-0.4a6/pcap.h; then
       PCAP_ROOT=`cd ../libpcap-0.4a6 && pwd`
       CORELIBS="${CORELIBS} -L$PCAP_ROOT -lpcap"
       INCS="${INCS} -I$PCAP_ROOT"
       AC_MSG_RESULT([found in $PCAP_ROOT])
dnl>
dnl> on place source tree as ntop subdir
dnl>
elif test -d libpcap-0.4 &&
     test -r libpcap-0.4/libpcap.a &&
     test -r libpcap-0.4/pcap.h; then
       PCAP_ROOT=`cd libpcap-0.4 && pwd`
       CORELIBS="${CORELIBS} -L$PCAP_ROOT -lpcap"
       INCS="${INCS} -I$PCAP_ROOT"
       AC_MSG_RESULT([found in $PCAP_ROOT])
dnl>
dnl> on place source tree as ntop subdir
dnl>
elif test -d libpcap-0.4a6 &&
     test -r libpcap-0.4a6/libpcap.a &&
     test -r libpcap-0.4a6/pcap.h; then
       PCAP_ROOT=`cd libpcap-0.4a6 && pwd`
       CORELIBS="${CORELIBS} -L$PCAP_ROOT -lpcap"
       INCS="${INCS} -I$PCAP_ROOT"
       AC_MSG_RESULT([found in $PCAP_ROOT])
else
     AC_CHECK_LIB(pcap, pcap_lookupdev)
     if test "$ac_tr_lib" != "HAVE_LIBPCAP"; then
       AC_MSG_RESULT([not found!])
       AC_MSG_RESULT([             *** FATAL ERROR ***             ])
       AC_MSG_RESULT([ It looks that you don't have the libpcap distribution installed.])
       AC_MSG_RESULT([ Download, compile and, optionally, install it.])
       AC_MSG_RESULT([ When finished please re-run this program.])
       AC_MSG_RESULT([ You can download the latest source tarball at http://www.tcpdump.org/])
       AC_MSG_ERROR([ The LBL Packet Capture Library, libpcap, was not found! ])
     else
	if test -r /usr/include/pcap/pcap.h; then
	       INCS="${INCS} -I/usr/include/pcap"
	       PCAP_ROOT="standard installation"
	else
       AC_MSG_RESULT([             *** FATAL ERROR ***             ])
       AC_MSG_RESULT([ It looks that you don't have the libpcap distribution installed.])
       AC_MSG_RESULT([ Download, compile and, optionally, install it.])
       AC_MSG_RESULT([ When finished please re-run this program.])
       AC_MSG_RESULT([ You can download the latest source tarball at http://www.tcpdump.org/])
       AC_MSG_ERROR([ The LBL Packet Capture Library, libpcap, was not found! ])
	fi
     fi
fi

dnl>
dnl> If your gdbm header file and library are installed somewhere strange
dnl>

dnl>
dnl> The GNU database manager gdbm (MANDATORY)
dnl> check for `gdbm_open' in -lgdbm
dnl>
dnl> order as follow
dnl> 1. user defined gdbm development tree
dnl> 2. standard installation in /usr/lib and /usr/include respectively
dnl> 3. default package installation in /usr/local/lib and /usr/local/include respectively
dnl> 4. gdbm development tree under the same ntop's root source directory or in a subdir

if test ".${GDBM_ROOT}" != .; then
  AC_MSG_CHECKING([for the GNU Database Manager Library gdbm (required package)])
  if test -d $GDBM_ROOT &&
     test -r $GDBM_ROOT/libgdbm.a &&
     test -r $GDBM_ROOT/gdbm.h; then
       GDBM_ROOT=`cd ${GDBM_ROOT} && pwd`
       CORELIBS="${CORELIBS} -L$GDBM_ROOT -lgdbm"
       INCS="${INCS} -I$GDBM_ROOT"
       AC_DEFINE(HAVE_GDBM_H)
       AC_MSG_RESULT([found in $GDBM_ROOT])
  else
    AC_MSG_RESULT([not found in ${GDBM_ROOT}])
    AC_MSG_RESULT([             *** FATAL ERROR ***             ])
    AC_MSG_RESULT([ It looks that you don't have some files needed to use the gdbm library.])
    AC_MSG_RESULT([ Please check the source tree, compile and, optionally, install the software.])
    AC_MSG_RESULT([ When finished please re-run this program.])
    AC_MSG_RESULT([ You can download the latest source tarball at http://www.gnu.org/software/gdbm/gdbm.html])
    AC_MSG_ERROR([ The GNU Gdbm Library development tree seems corrupted or incomplete!])
  fi
else
  AC_HAVE_HEADERS(gdbm.h)
  AC_CHECK_LIB(gdbm, gdbm_open, CORELIBS="$CORELIBS -lgdbm")
fi


if test ".`echo $CORELIBS | grep gdbm`" = .; then
  if test -d /usr/local &&
     test -r /usr/local/lib/libgdbm.a &&
     test -r /usr/local/include/gdbm.h; then
       GDBM_ROOT="/usr/local"
       CORELIBS="${CORELIBS} -L$GDBM_ROOT/lib -lgdbm"
       INCS="${INCS} -I$GDBM_ROOT/include"
       AC_DEFINE(HAVE_GDBM_H)
       AC_MSG_RESULT([found in $GDBM_ROOT])
  elif test -r /usr/lib/libgdbm.a &&
       test -r /usr/include/gdbm.h; then
         GDBM_ROOT="/usr"
         CORELIBS="${CORELIBS} -lgdbm"
         AC_DEFINE(HAVE_GDBM_H)
         AC_MSG_RESULT([found in $GDBM_ROOT])
  else
       AC_CHECK_LIB(gdbm, gdbm_close)
       if test "$ac_tr_lib" != "HAVE_LIBGDBM"; then
         AC_MSG_RESULT([             *** FATAL ERROR ***             ])
         AC_MSG_RESULT([ It looks that you don't have the libgdbm distribution installed.])
         AC_MSG_RESULT([ Download, compile and, optionally, install it.])
         AC_MSG_RESULT([ When finished please re-run this program.])
         AC_MSG_RESULT([ You can download the latest source tarball at http://www.gnu.org/software/gdbm/gdbm.html])
         AC_MSG_ERROR([ The GNU Gdbm Library development tree seems corrupted or incomplete!])
       else
         GDBM_ROOT="standard installation"
       fi
  fi
fi

dnl>
dnl> check for installed optional libraries
dnl>

echo
echo "Step 7. Looking for optional GPLed libraries...."
echo

AC_CHECK_LIB(c, re_search, AC_DEFINE(HAVE_REGEX))
AC_CHECK_LIB(z, gzopen, AC_DEFINE(HAVE_ZLIB))

if test "$ac_cv_lib_z_gzopen" = "yes"; then
   AC_CHECK_HEADERS(zlib.h)
   MORELIBS="$MORELIBS -lz"
fi


dnl>
dnl> check for `gdchart' library by Bruce Verderaime [http://www.fred.net/brv/chart/]
dnl> By default the configuration script will try to link against GDChart library.
dnl> It looks if the the GDChart source code is available at the parent directory
dnl>
if test ".$ac_disable_gdchart" = ".no"; then
  AC_MSG_CHECKING([for GDchart (optional package)])

dnl>
dnl> user defined directory passed as option at configuration time
dnl>
  if test ".${GDCHART_ROOT}" != .; then
    if test -d $GDCHART_ROOT &&
       test -r $GDCHART_ROOT/libgdchart.a &&
       test -r $GDCHART_ROOT/gdc.h &&
       test -r $GDCHART_ROOT/gd-1.8.3/libgd.a &&
       test -r $GDCHART_ROOT/gd-1.8.3/gd.h &&
       test -r $GDCHART_ROOT/zlib-1.1.4/libz.a; then
         GDCHART_ROOT=`cd ${GDCHART_ROOT} && pwd`
         MORELIBS="${MORELIBS} -L$GDCHART_ROOT -lgdchart -L$GDCHART_ROOT/gd-1.8.3 -lgd -L$GDCHART_ROOT/gd-1.8.3/libpng-1.2.1 -lpng -L$GDCHART_ROOT/zlib-1.1.4 -lz"
         INCS="${INCS} -I$GDCHART_ROOT -I$GDCHART_ROOT/zlib-1.1.4"
         AC_DEFINE(HAVE_GDCHART)
	 AC_DEFINE(HAVE_ZLIB)
         AC_MSG_RESULT([found in $GDCHART_ROOT])
    else
      AC_MSG_RESULT([not found in ${GDCHART_ROOT}])
      AC_MSG_RESULT([ It looks that you don't have some files needed to use the GDChart library.])
      AC_MSG_RESULT([ Please check the source tree, compile and, optionally, install the software.])
      AC_MSG_RESULT([ When finished please re-run this program.])
      AC_MSG_RESULT([ You can download the needed code using CVS from cvs.ntop.org ])
      AC_MSG_WARN([ Some ntop's features will be disabled.])
    fi
dnl>
dnl> on place source tree under the same ntop's parent directory
dnl>
  else
    if test -d ../gdchart0.94c &&
       test -r ../gdchart0.94c/gdc.h &&
       test -r ../gdchart0.94c/libgdchart.a &&
       test -r ../gdchart0.94c/gd-1.8.3/libgd.a &&
       test -r ../gdchart0.94c/gd-1.8.3/gd.h &&
       test -r ../gdchart0.94c/gd-1.8.3/libpng-1.2.1/libpng.a &&
       test -r ../gdchart0.94c/gd-1.8.3/libpng-1.2.1/gd.h; then
         GDCHART_ROOT="../gdchart0.94c"
         GDCHART_ROOT=`cd ${GDCHART_ROOT} && pwd`
         MORELIBS="${MORELIBS} -L$GDCHART_ROOT -lgdchart -L$GDCHART_ROOT/gd-1.8.3 -lgd -L$GDCHART_ROOT/gd-1.8.3/libpng-1.2.1 -lpng"
         INCS="${INCS} -I$GDCHART_ROOT"
         AC_DEFINE(HAVE_GDCHART)
         AC_MSG_RESULT([found in $GDCHART_ROOT])
    else
         AC_MSG_RESULT([not found])
    fi
  fi
else
  AC_MSG_WARN([GDchart support disabled via command line option!])
fi



dnl>
dnl> OpenSSL by Open SLL Project
dnl>
dnl>  First a macro to encapsulate the tests
dnl>    Args: 1 - libssl location
dnl>          2 - ssl.h location
dnl>

AC_DEFUN(ntop_testopenssl, [
    if test ".$ac_enable_showopenssltests" = ".yes"; then
        AC_MSG_CHECKING([for libxxx.a in $1 and ssl.h in $2])
    fi
    if test -d $1 &&
       test -r $1/libssl.a &&
       test -r $1/libcrypto.a &&
       test -d $2 &&
       test -r $2/ssl.h; then
         if test ".$ac_enable_showopenssltests" = ".yes"; then
             AC_MSG_CHECKING([test program])
         fi
         OSSL_ROOT=`cd $1 && pwd`
         _MORELIBS="${MORELIBS}"
         _INCS="${INCS}"
         MORELIBS="${MORELIBS} -L$1 -lssl -lcrypto"
         INCS="${INCS} -I$2"
         AC_TRY_COMPILE([
#include <openssl/rsa.h>
#include <openssl/crypto.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
             unsigned long l;
             char buf[200];],
             [ERR_error_string_n(l, buf, sizeof(buf));],
             ac_cv_has_openssl=yes,
             ac_cv_has_openssl=no)
         if test ".$ac_cv_has_openssl" = ".yes"; then
             if test ".$ac_enable_showopenssltests" = ".yes"; then
                 AC_MSG_RESULT([OK])
             else
                 AC_MSG_RESULT([found in $1 and $2])
             fi
             AC_DEFINE(HAVE_OPENSSL)
         else
             AC_MSG_RESULT([ERROR: older version])
             MORELIBS="${_MORELIBS}"
             INCS="${_INCS}"
         fi
    else
        if test ".$ac_enable_showopenssltests" = ".yes"; then
            AC_MSG_RESULT([not found])
        fi
        ac_cv_has_openssl=no
    fi
])

dnl>
dnl> Do not perform any check for the OpenSSL library,
dnl> if the user decided to compile without HTTPS support.
dnl>
if test ".$ac_disable_openssl" = ".no"; then
  if test ".$ac_enable_showopenssltests" = ".yes"; then
      AC_MSG_RESULT([Checking for OpenSSL Library by Open SLL Project (optional package)...])
  else
      AC_MSG_CHECKING([Checking for OpenSSL Library by Open SLL Project (optional package)...])
  fi
 
dnl> Test order as follow
dnl>
dnl>     user defined openssl development tree
dnl> OR:
dnl>     standard installation in /usr/lib and /usr/include 
dnl>     semi-standard installation in /usr/lib/ssl and /usr/include/ssl
dnl>     semi-standard installation in /usr/lib/openssl and /usr/include/openssl
dnl>     default package installation in /usr/local/lib and /usr/local/include
dnl>     openssl development tree under the same ntop's root source directory or in a subdir

  if test  ".${OSSL_ROOT}" != .; then
      ntop_testopenssl(${OSSL_ROOT}, ${OSSL_ROOT})
      if test ".$ac_cv_has_openssl" = ".no"; then
	  ntop_testopenssl(${OSSL_ROOT}/lib, ${OSSL_ROOT}/include)
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl(${OSSL_ROOT}/lib, ${OSSL_ROOT}/include/openssl)
      fi
  else
      ntop_testopenssl("/usr/lib", "/usr/include")
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("/usr/lib/ssl", "/usr/include/ssl")
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("/usr/lib", "/usr/include/openssl")
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("/usr/lib/openssl", "/usr/include/openssl")
      fi

      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("/usr/local/lib/ssl", "/usr/local/include/ssl")
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("/usr/local/lib/ssl", "/usr/local/include/ssl")
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("/usr/local/lib/ssl", "/usr/local/include/ssl")
      fi

      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("../openssl", "../openssl")
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("../openssl-0.9.7b", "../openssl-0.9.7b/ssl")
          if test ".$ac_cv_has_openssl" = ".yes"; then
              AC_MSG_WARN([ ntop has not been tested with openssl-0.9.7b])
              AC_MSG_RESULT([          this was unreleased as of 2.1's release date])
              AC_MSG_RESULT([          (but we'll give it a try anyway])
          fi
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("../openssl-0.9.7a", "../openssl-0.9.7a/ssl")
          if test ".$ac_cv_has_openssl" = ".yes"; then
              AC_MSG_WARN([ ntop has not been tested with openssl-0.9.7a])
              AC_MSG_RESULT([          this was unreleased as of 2.1's release date])
              AC_MSG_RESULT([          (but we'll give it a try anyway])
          fi
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("../openssl-0.9.7", "../openssl-0.9.7/ssl")
          if test ".$ac_cv_has_openssl" = ".yes"; then
              AC_MSG_WARN([ ntop has not been tested with openssl-0.9.7a])
              AC_MSG_RESULT([          this was beta as of 2.1's release date])
              AC_MSG_RESULT([          (but we'll give it a try anyway])
          fi
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("../openssl-0.9.6d", "../openssl-0.9.6d/ssl")
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("../openssl-0.9.6c", "../openssl-0.9.6c/ssl")
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("../openssl-0.9.6b", "../openssl-0.9.6b/ssl")
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("../openssl-0.9.6a", "../openssl-0.9.6a/ssl")
      fi
      if test ".$ac_cv_has_openssl" = ".no"; then
          ntop_testopenssl("../openssl-0.9.6", "../openssl-0.9.6/ssl")
      fi
  fi
  if test ".$ac_cv_has_openssl" = ".no"; then
      AC_MSG_WARN([ The Open SSL Library development tree seems corrupted or incomplete!])
      AC_MSG_RESULT([ Download, compile and, optionally, install it.])
      AC_MSG_RESULT([ When finished please re-run this program.])
      AC_MSG_WARN([ You can download the latest source tarball at http://www.openssl.org/])
      AC_MSG_WARN([ HTTPS disabled!])
      if test ".$ac_enable_sslv3" = ".yes"; then
          AC_MSG_WARN([--enable-sslv3 irrelevant, ignored!])
      fi
      if test ".$ac_enable_sslwatchdog" = ".yes"; then
          AC_MSG_ERROR([SSL Watchdog requires openSSL. rerun without --disable-openssl])
      fi
  else  dnl> Yes, we have openSSL...
      dnl>
      dnl> Enable SSL v3
      dnl>
      if test ".$ac_enable_sslv3" = ".yes"; then
         AC_DEFINE(SUPPORT_SSLV3)
      fi
      dnl>
      dnl> Enable SSL Watchdog?
      dnl>
      if test ".$ac_enable_sslwatchdog" = ".yes"; then
         AC_DEFINE(USE_SSLWATCHDOG)
      fi
  fi
else
  AC_MSG_WARN([HTTPS support disabled via command line option!])
  if test ".$ac_enable_sslv3" = ".yes"; then
      AC_MSG_WARN([--enable-sslv3 irrelevant, ignored!])
  fi
  if test ".$ac_enable_sslwatchdog" = ".yes"; then
      AC_MSG_WARN([--enable-ssl-watchdog irrelevant, ignored!])
      ac_enable_sslwatchdog = "no"
  fi
fi

if test ".$ac_enable_sslwatchdog" = ".yes"; then
  if test ".$ac_disable_multithread" = ".yes"; then
      AC_MSG_ERROR([SSL Watchdog requires Multithreading. rerun without --disable-multithread])
  fi
fi

dnl>
dnl> check for `UCD-SNMP' library by University of California [http://ucd-snmp.ucdavis.edu]
dnl>
dnl>AC_CHECK_LIB(ucdagent, register_mib, [AC_DEFINE(HAVE_SNMP) SNMPLIBS="-lsnmp -lucdagent -lucdmibs"], , -lsnmp -lucdagent -lucdmibs $LIBS $MORELIBS)


echo
echo "Step 8. Creating various ntop develpment tools...."
echo

dnl>
dnl> Do not walk in the plugins/ subdir if the user decided he/she does not need any plugin.
dnl>
if test "$ac_disable_plugins" = yes; then
  PLUGINS=''
  AC_MSG_WARN([compilation of ntop's plugins disabled via command line option!])
fi



echo
echo "Step 9. Semi-Automatic files generation...."
echo

AC_SUBST(VERSION)

AC_SUBST(LIBCURSES)
AC_SUBST(LIBREADLINE)
AC_SUBST(SNMPLIBS)

AC_SUBST(INCS)
AC_SUBST(LIBS)
AC_SUBST(MORELIBS)
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(DYN_FLAGS)
AC_SUBST(CCLD)

AC_SUBST(CORELIBS)
AC_SUBST(MOREOBJECTS)
AC_SUBST(SNMPLIBS)

AC_SUBST(MORESOURCES)
AC_SUBST(MORELIBS)

if test ".$ac_disable_intop" = ".yes"; then
INTOP=
fi

AC_SUBST(INTOP)
AC_SUBST(PLUGINS)

dnl>
dnl> ntops directories
dnl>
DATAFILE_DIR=$datadir/ntop
DATAFILE_DIR=`(
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    eval echo "$DATAFILE_DIR"
)`
AC_DEFINE_UNQUOTED(DATAFILE_DIR,"$DATAFILE_DIR", [Data file directory])
AC_SUBST(DATAFILE_DIR)

CONFIGFILE_DIR=$sysconfdir/ntop
CONFIGFILE_DIR=`(
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    eval echo "$CONFIGFILE_DIR"
)`
AC_DEFINE_UNQUOTED(CONFIGFILE_DIR,"$CONFIGFILE_DIR", [Configuration file directory])
AC_SUBST(CONFIGFILE_DIR)

RUN_DIR=$localstatedir/ntop
RUN_DIR=`(
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    eval echo "$RUN_DIR"
)`
AC_DEFINE_UNQUOTED(RUN_DIR,"$RUN_DIR", [Run files directory])
AC_SUBST(RUN_DIR)

PLUGIN_DIR=$libdir/ntop/plugins
PLUGIN_DIR=`(
  test "x$prefix" = xNONE && prefix=$ac_default_prefix
  test "x$exec_prefix" = xNONE && exec_prefix=${prefix}
  eval echo "$PLUGIN_DIR"
)`
AC_DEFINE_UNQUOTED(PLUGIN_DIR,"$PLUGIN_DIR", [Plugin installation directory])
AC_SUBST(PLUGIN_DIR)

DBFILE_DIR=$localstatedir/ntop
DBFILE_DIR=`(
  test "x$prefix" = xNONE && prefix=$ac_default_prefix
  eval echo "$DBFILE_DIR"
)`
AC_DEFINE_UNQUOTED(DBFILE_DIR,"$DBFILE_DIR", [Database file directory])
AC_SUBST(DBFILE_DIR)

dnl> temporary
AC_DEFINE_UNQUOTED(RETSIGTYPE, void)

dnl> To re-enable pep move the following line into the list below
dnl> plugins/pep/Makefile
AC_OUTPUT([
Makefile
plugins/Makefile
intop/Makefile
ntop-config
], [
case "$CONFIG_FILES" in
 *ntop-config*)
    chmod +x ntop-config
    ;;
esac])

dnl>
dnl> versioning
dnl>
echo "creating version.c"
/bin/rm -f version.c
echo $NTOP_VERSION $NTOP_VERSION_EXTRA  | sed -e 's/.*/char * version   = "&";/' > version.c
./config.guess | sed -e 's/.*/char * osName    = "&";/' >> version.c
echo "char * author    = \"Luca Deri <deri@ntop.org>\";" >> version.c
date +"%D %r" | sed -e 's/.*/char * buildDate = "&";/' >> version.c
echo $CONFIGURE_PARAMETERS | sed -e 's/.*/char * configure_parameters   = "&";/' >> version.c
echo ${host} | sed -e 's/.*/char * host_system_type   = "&";/' >> version.c
echo ${target} | sed -e 's/.*/char * target_system_type   = "&";/' >> version.c
echo ${CC} ${CFLAGS} ${DEFS} | sed -e 's/.*/char * compiler_cflags   = "&";/' >> version.c
echo ${INCS} | sed -e 's/.*/char * include_path    = "&";/' >> version.c
echo ${LDFLAGS} ${LIBS} | sed -e 's/.*/char * system_libs    = "&";/' >> version.c
echo ${CORELIBS} | sed -e 's/.*/char * core_libs   = "&";/' >> version.c
echo ${MORELIBS} ${SNMPLIBS} | sed -e 's/.*/char * additional_libs   = "&";/' >> version.c
echo ${prefix} | sed -e 's/.*/char * install_path   = "&";/' >> version.c

echo "

This is your $PACKAGE $VERSION configuration:

Host System Type  : ${host}
Compiler (cflags) : ${CC} ${CFLAGS} ${DEFS}
Include path      : ${INCS}
System Libs       : ${LDFLAGS} ${LIBS}
Core Libs         : ${CORELIBS}
Additional Libs   : ${MORELIBS} ${SNMPLIBS}
LBL pcap in       : ${PCAP_ROOT}
GNU gdbm in       : ${GDBM_ROOT}
MultiThread mode  : ${multithread_mode}
Install path      : ${prefix}

Now type 'make' or 'gmake' (GNU make) on *BSD and Solaris
systems to build $PACKAGE $VERSION.
"

echo
echo
echo "================================================="
echo
echo "If you like ntop, please do not forget to support"
echo "its development. See SUPPORT_NTOP.txt for more"
echo "information. Thanks for supporting ntop!"
echo
echo "================================================="
echo

dnl> MacOSX needs patched versions of some configure-related files
case "$host:$CC" in
    *darwin* )
	cp packages/MacOSX/lt* .
	;;
esac

exit 0
