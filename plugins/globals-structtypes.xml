/*
 * -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 *                          http://www.ntop.org
 *
 * Copyright (C) 1998-2004 Luca Deri <deri@ntop.org>
 *
 * -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*XMLNOTE
   *
   *  The internals of ntop are pretty much just one structure - almost everything   
   *  is in or pointed to by myGlobals, so we can't really just dump it as one 
   *  structure - it's huge, unwieldy, etc.
   *
   *  So we impose an arbitrary organization, grouping the sections into things 
   *  to request by switches on the dump.xml URL:
   *
   *      Host (computer) data
   *      Physical and Logical network interfaces
   *      Configuration data (command line, web configure)
   *      Statistics (counts about ntop)
   *      Internals (misc internal stuff)
   *
   *  First we create definitions (xml_s_ include files) for various ntop structs.
   *  (A few, really complex ones, are hand-coded in xmldumpPlugin.c).
   *
   *  Then we create the dump logic (xml_g_ include files) for our choosen output.
   *
   */

/* ************************************************************* */
/* * Define sub version                                        * */
/* *   (each time THIS file changes, increment)                * */
/* ************************************************************* */

/*XMLDEFINEBEGIN xml_g_subversion.inc */
/*XMLDEFINE CONST_XML_SUBVERSION               "1" */
/*XMLDEFINEEND */

/* ************************************************************* */
/* * Define structs (xml_s_ include files)                     * */
/* ************************************************************* */

typedef struct fcAddr {
    u_int8_t domain;
    u_int8_t area;
    u_int8_t port;
} FcAddress;
/*XMLSTRUCT FcAddress */
/*XMLSECTIONBEGIN xml_s_fcaddress.inc parent input */
/*XML e FcAddress                           parent:Work         "" */
/*XML n:u domain                            Work                "" */
/*XML n:u area                              Work                "" */
/*XML n:u port                              Work                "" */
/*XMLSECTIONEND */

typedef struct hostAddr {
  u_int    hostFamily; /* AF_INET AF_INET6 */
  union {
    struct in_addr  _hostIp4Address;
#ifdef INET6 
    struct in6_addr _hostIp6Address;
#endif
  } addr;
} HostAddr;

/*XMLSTRUCT HostAddr */
/*XMLSECTIONBEGIN xml_s_hostaddr.inc parent input buf2 */
/*XML e HostAddr                            parent:Work         "" */
/*XMLSWITCH input->hostFamily */
/*XMLCASE AF_INET */
/*XML n:u hostFamily                        Work                "IPv4" */
/*XML in_addr input->addr._hostIp4Address   Work                "" */
/*XMLCASE AF_INET6 */
/*XML n:u hostFamily                        Work                "IPv6" */
#ifdef INET6 
/*XML in6_addr input->addr._hostIp6Address   Work                "" */
#endif
/*XMLCASE DEFAULT */
/*XML n:u hostFamily                        Work                "Unknown" */
/*XMLHCTIWS */

/*XMLSECTIONEND */

typedef struct _ethSerial {
  u_char  ethAddress[LEN_ETHERNET_ADDRESS];
  u_short vlanId;
} EthSerial;

typedef struct _ipSerial {
  HostAddr ipAddress;
  u_short  vlanId;
} IpSerial;

typedef struct _fcSerial {
    FcAddress fcAddress;
    u_short vsanId;
} FcSerial;

typedef struct hostSerial {
  u_char serialType;     /* 0 == empty */
  union {
    EthSerial ethSerial; /* hostSerial == SERIAL_MAC */
    IpSerial  ipSerial;  /* hostSerial == SERIAL_IPV4/SERIAL_IPV6 */
    FcSerial  fcSerial;
  } value;
} HostSerial;

/*XMLSTRUCT HostSerial */
/*XMLSECTIONBEGIN xml_s_hostserial.inc parent input */
/*XML e HostSerial                          parent:Work         "" */
/*XMLSWITCH input->serialType */
/*XMLCASE SERIAL_MAC */
/*XML n:u serialType                        Work                "MAC" */
/*XML ethaddress input->value.ethSerial.ethAddress Work         "" */
/*XML n:u input->value.ethSerial.vlanId     Work                "" */
/*XMLCASE SERIAL_IPV4 withnext */
/*XMLCASE SERIAL_IPV6 */
/*XML n:u serialType                        Work                "IP" */
/*XML &hostaddr input->value.ipSerial.ipAddress Work            "input->value.ipSerial.ipAddress" */
/*XML n:u input->value.ipSerial.vlanId      Work                "" */
/*XMLCASE DEFAULT */
/*XML n:u serialType                        Work                "FiberChannel" */
/*XML &fcaddress input->value.fcSerial.fcAddress Work           "" */
/*XML n:u input->value.fcSerial.vsanId      Work                "" */
/*XMLHCTIWS */

/*XMLSECTIONEND */

/* -------------------------------------------------------------
typedef struct simpleProtoTrafficInfo {
  TrafficCounter local, local2remote, remote, remote2local;
  TrafficCounter totalFlows;
} SimpleProtoTrafficInfo;
 */

/*XMLSTRUCT SimpleProtoTrafficInfo */
/*XMLSECTIONBEGIN xml_s_simpleprototrafficinfo.inc parent input */
/*XML e      SimpleProtoTrafficInfo         parent:Work         "" */
/*XML trafficcounter local                  Work                "" */
/*XML trafficcounter local2remote           Work                "" */
/*XML trafficcounter remote                 Work                "" */
/*XML trafficcounter remote2local           Work                "" */
/*XML trafficcounter totalFlows             Work                "" */
/*XMLSECTIONEND */


/* -------------------------------------------------------------
typedef struct packetStats {
  TrafficCounter upTo64, upTo128, upTo256;
  TrafficCounter upTo512, upTo1024, upTo1518;
#ifdef MAKE_WITH_JUMBO_FRAMES
  TrafficCounter upTo2500, upTo6500, upTo9000, above9000;
#else
  TrafficCounter above1518;
#endif
  TrafficCounter shortest, longest;
  TrafficCounter badChecksum, tooLong;
} PacketStats;
 */

/*XMLSTRUCT PacketStats Work2 Work3 */
/*XMLSECTIONBEGIN xml_s_packetstats.inc parent input */
/*XML e      PacketStats                    parent:Work         "" */
/*XML trafficcounter upTo64                 Work                "" */
/*XML trafficcounter upTo128                Work                "" */
/*XML trafficcounter upTo256                Work                "" */
/*XML trafficcounter upTo512                Work                "" */
/*XML trafficcounter upTo1024               Work                "" */
/*XML trafficcounter upTo1518               Work                "" */
/*XML e      Jumbo                          Work:Work2          "" */
#ifdef MAKE_WITH_JUMBO_FRAMES
/*XML trafficcounter upTo2500               Work2               "" */
/*XML trafficcounter upTo6500               Work2               "" */
/*XML trafficcounter upTo9000               Work2               "" */
/*XML trafficcounter above9000              Work2               "" */
#else
/*XML e      NonJumbo                       Work:Work2          "" */
/*XML trafficcounter above1518              Work2               "" */
#endif
/*XML trafficcounter shortest               Work                "" */
/*XML trafficcounter longest                Work                "" */
/*XML trafficcounter badChecksum            Work                "" */
/*XML trafficcounter tooLong                Work                "" */
/*XMLSECTIONEND */


/* -------------------------------------------------------------
typedef struct fcpacketStats {
  TrafficCounter upTo36, upTo48, upTo52, upTo68, upTo104;
  TrafficCounter upTo548, upTo1060, upTo2136, above2136;
  TrafficCounter shortest, longest;
  TrafficCounter badCRC, tooLong;
} FcPacketStats;
 */

/*XMLSTRUCT FcPacketStats */
/*XMLSECTIONBEGIN xml_s_fcpacketstats.inc parent input */
/*XML e      FcPacketStats                  parent:Work         "" */
/*XML trafficcounter upTo36                 Work                "" */
/*XML trafficcounter upTo48                 Work                "" */
/*XML trafficcounter upTo52                 Work                "" */
/*XML trafficcounter upTo68                 Work                "" */
/*XML trafficcounter upTo104                Work                "" */
/*XML trafficcounter upTo548                Work                "" */
/*XML trafficcounter upTo1060               Work                "" */
/*XML trafficcounter upTo2136               Work                "" */
/*XML trafficcounter above2136              Work                "" */
/*XML trafficcounter shortest               Work                "" */
/*XML trafficcounter longest                Work                "" */
/*XML trafficcounter badCRC                 Work                "" */
/*XML trafficcounter tooLong                Work                "" */
/*XMLSECTIONEND */


/* -------------------------------------------------------------
typedef struct ttlStats {
  TrafficCounter upTo32, upTo64, upTo96;
  TrafficCounter upTo128, upTo160, upTo192, upTo224, upTo255;
} TTLstats;
 */

/*XMLSTRUCT TTLstats */
/*XMLSECTIONBEGIN xml_s_ttlstats.inc parent input */
/*XML e      TTLstats                       parent:Work         "" */
/*XML trafficcounter upTo32                 Work                "" */
/*XML trafficcounter upTo64                 Work                "" */
/*XML trafficcounter upTo96                 Work                "" */
/*XML trafficcounter upTo128                Work                "" */
/*XML trafficcounter upTo160                Work                "" */
/*XML trafficcounter upTo192                Work                "" */
/*XML trafficcounter upTo224                Work                "" */
/*XML trafficcounter upTo255                Work                "" */
/*XMLSECTIONEND */


/* -------------------------------------------------------------
typedef struct thptEntry {
  float trafficValue;
  /* ****** */
  HostSerial topHostSentSerial, secondHostSentSerial, thirdHostSentSerial;
  TrafficCounter topSentTraffic, secondSentTraffic, thirdSentTraffic;
  /* ****** */
  HostSerial topHostRcvdSerial, secondHostRcvdSerial, thirdHostRcvdSerial;
  TrafficCounter topRcvdTraffic, secondRcvdTraffic, thirdRcvdTraffic;
} ThptEntry;
 */

/*XMLSTRUCT ThptEntry */
/*XMLSECTIONBEGIN xml_s_thptentry.inc parent input */
/*XML e ThptEntry                           parent:Work         "" */
/*XML n:f trafficValue                      Work                "" */
/*XML trafficcounter topSentTraffic         Work                "" */
/*XML trafficcounter secondSentTraffic      Work                "" */
/*XML trafficcounter thirdSentTraffic       Work                "" */
/*XML trafficcounter topRcvdTraffic         Work                "" */
/*XML trafficcounter secondRcvdTraffic      Work                "" */
/*XML trafficcounter thirdRcvdTraffic       Work                "" */
/*XMLSECTIONEND */



/* -------------------------------------------------------------
typedef struct protocolsList {
  char *protocolName;
  u_int16_t protocolId, protocolIdAlias; /* I know it's ugly however this
                                            should be enough for most of
                                            the situations
                                         */
  struct protocolsList *next;
} ProtocolsList;
 */
/*XMLSTRUCT ProtocolsList */
/*XMLSECTIONBEGIN xml_s_protocolslist.inc parent input */
/*XML e Protocol                            parent:Work         "" */
/*XML s protocolName                        Work                "" */
/*XML n:u protocolId                        Work                "" */
/*XML n:u protocolIdAlias                   Work                "" */
/*XMLNOTE skip next pointer - treat as array */
/*XMLSECTIONEND */


/* -------------------------------------------------------------
typedef struct extraPage {
  /* url and description of extra page (if any) for a plugin */
  char *icon;
  char *url;
  char *descr;
} ExtraPage;

typedef enum {
  NoViewNoConfigure = 0,
  ViewOnly,
  ConfigureOnly,
  ViewConfigure
} PluginViewConfigure;

/*XMLSTRUCT PluginInfo */
typedef struct pluginInfo {
  /* Plugin Info */
  char *pluginNtopVersion;   /* Version of ntop for which the plugin was compiled */
  char *pluginName;          /* Short plugin name (e.g. icmpPlugin) */
  char *pluginDescr;         /* Long plugin description */
  char *pluginVersion;
  char *pluginAuthor;
  char *pluginURLname;       /* Set it to NULL if the plugin doesn't speak HTTP */
  char activeByDefault;      /* Set it to 1 if this plugin is active by default */
  PluginViewConfigure viewConfigureFlag;
  char inactiveSetup;        /* Set it to 1 if this plugin can be called inactive for setup */
  IntFunct startFunct;
  VoidFunct termFunct;
  PluginFunct pluginFunct;   /* Initialize here all the plugin structs... */
  PluginHTTPFunct httpFunct; /* Set it to NULL if the plugin doesn't speak HTTP */
  PluginCreateDeleteFunct crtDltFunct; /* Called whenever a host is created/deleted */
  char* bpfFilter;           /* BPF filter for selecting packets that
                                will be routed to the plugin */
  char *pluginStatusMessage;
  ExtraPage *extraPages;     /* other pages this responds to */
} PluginInfo;
 */

/*XMLSECTIONBEGIN xml_s_plugininfo.inc parent input */
/*XML e PluginInfo                          parent:Work         "" */
/*XML s pluginNtopVersion                   Work                "" */
/*XML s pluginName                          Work                "" */
/*XML s pluginDescr                         Work                "" */
/*XML s pluginVersion                       Work                "" */
/*XML s pluginAuthor                        Work                "" */
/*XML s pluginURLname                       Work                "" */
/*XML b activeByDefault                     Work                "" */
//TODO viewConfigureFlag
/*XML b inactiveSetup                       Work                "" */
//TODO ? the pointers ???
/*XML s bpfFilter                           Work                "" */
/*XML s pluginStatusMessage                 Work                "" */
//TODO ? extraPages ???
/*XMLSECTIONEND */


/* -------------------------------------------------------------
/*XMLSTRUCT PluginStatus */
typedef struct pluginStatus {
  PluginInfo *pluginPtr;
  void       *pluginMemoryPtr; /* ptr returned by dlopen() */
  char        activePlugin;
} PluginStatus;
 */

/*XMLSECTIONBEGIN xml_s_pluginstatus.inc parent input */
/*XML e PluginStatus                        parent:Work         "" */
/*XML plugininfo pluginPtr                  Work                "" */
//TODO ? the pointer ???
/*XML b activePlugin                        Work                "" */
/*XMLSECTIONEND */


/* -------------------------------------------------------------
/*XMLSTRUCT FlowFilterList */
typedef struct flowFilterList {
  char* flowName;         
  struct bpf_program *fcode;     /* compiled filter code one for each device  */
  struct flowFilterList *next;   /* next element (linked list) */
  TrafficCounter bytes, packets;
  PluginStatus pluginStatus;
} FlowFilterList;
 */

/*XMLSECTIONBEGIN xml_s_flowfilterlist.inc parent input */
/*XML e FlowFilterList                      parent:Work         "" */
/*XML trafficcounter bytes                  Work                "" */
/*XML trafficcounter packets                Work                "" */
/*XML &pluginstatus pluginStatus            Work                "" */
/*XML s flowName                            Work                "" */

/*XMLSECTIONEND */


/* -------------------------------------------------------------
typedef struct badGuysAddr {
  HostAddr       addr;
  time_t         lastBadAccess;
  u_int16_t      count;
} BadGuysAddr;
 */

/*XMLSTRUCT BadGuysAddr */
/*XMLSECTIONBEGIN xml_s_badguysaddr.inc parent input */
/*XML e      BadGuysAddr                    parent:Work         "" */
/*XML &hostaddr addr                        Work                "" */
/*XML time_t lastBadAccess                  Work                "" */
/*XML n:u count                             Work                "" */

/*XMLSECTIONEND */


/* -------------------------------------------------------------
typedef struct _userPref {
  char *accessLogFile;          /* -a |--access-log-file */
  bool enablePacketDecoding;    /* -b | --disable-decoders */
  bool stickyHosts;             /* -c | --sticky-hosts */
  bool daemonMode;              /* -d | --daemon */
  int  maxNumLines;             /* -e | --max-table-rows */
  char *rFileName;              /* -f | --traffic-dump-file */
  bool trackOnlyLocalHosts;     /* -g | --track-local-hosts */
  char *devices;                /* -i | --interface */
  bool enableOtherPacketDump;   /* -j | --create-other-packets */
  char *pcapLog;                /* -l | --pcap-log */
  char *localAddresses;         /* -m | --local-subnets */
  bool numericFlag;             /* -n | --numeric-ip-addresses */
  bool dontTrustMACaddr;        /* -o | --no-mac */
  char *protoSpecs;             /* -p | --protocols */
  bool enableSuspiciousPacketDump; /* -q | --create-suspicious-packets */
  int  refreshRate;             /* -r | --refresh-time */
  bool disablePromiscuousMode;  /* -s | --no-promiscuous */
  int  traceLevel;              /* -t | --trace-level */

  u_int     maxNumHashEntries;  /* -x */
  u_int     maxNumSessions;     /* -X */

  u_int16_t defaultVsan;        /* -v | --default-vsan */
  char      *webAddr;           /* -w | --http-serveraddress[:port] */
  int       webPort;
  int       ipv4or6;            /* -6 -4 */
  bool      enableSessionHandling; /* -z | --disable-sessions */

  char *currentFilterExpression;/* -B | --filter-expression */
  u_short samplingRate;         /* -C | --sampling-rate */
  char domainName[MAXHOSTNAMELEN]; /* -D | --domain */
  char *flowSpecs;              /* -F | --flow-spec */

  bool debugMode;               /* -K | --enable-debug *
#ifndef WIN32
  int  useSyslog;               /* -L | --use-syslog*/
#endif

  bool mergeInterfaces;         /* -M | --no-interface-merge */
  char *pcapLogBasePath;        /* -O | --pcap-file-path */ /* Added by Ola Lundqvist <opal@debian.org>. */
  char *fcNSCacheFile;          /* -N | --wwn-map */
  char *mapperURL;              /* -U | --mapper */

#ifdef HAVE_OPENSSL
  char *sslAddr;                /* -W | --https-serveraddress[:port] */
  int  sslPort;
#endif

#ifdef MAKE_WITH_SSLWATCHDOG_RUNTIME
  bool useSSLwatchdog;          /* '133' */
#endif

#if defined(CFG_MULTITHREADED) && defined(MAKE_WITH_SCHED_YIELD)
  bool disableSchedYield;       /* --disable-schedyield '134' */
#endif

  bool w3c;                     /* --w3c '136' */

  char *P3Pcp;                  /* --p3p-cp '137' */
  char *P3Puri;                 /* --p3p-uri '138' */

#if !defined(WIN32) && defined(HAVE_PCAP_SETNONBLOCK)
  bool setNonBlocking;          /* --set-pcap-nonblocking '139' */
#endif

  char *instance;               /* --instance '140' */
  char *logo;

  bool disableStopcap;          /* --disable-stopcap '142' */
  bool disableInstantSessionPurge; /* --disable-instantsessionpurge '144' */
  bool disableMutexExtraInfo;   /* --disable-mutexextrainfo '145' */

  bool printFcOnly;             /* --fc-only '147' */
  bool printIpOnly;             /* --no-fc '148' */
  bool noInvalidLunDisplay;     /* --no-invalid-lun '149' */

  bool skipVersionCheck;        /* --skip-version-check '150' */
} UserPref;
 */

/*XMLSTRUCT UserPref */
/*XMLSECTIONBEGIN xml_s_userpref.inc parent input */
/*XML e UserPref             parent:Work         "" */
/*XML s accessLogFile        Work    "-a | --access-log-file" */
/*XML b enablePacketDecoding Work    "-b | --disable-decoders" */
/*XML b stickyHosts          Work    "-c | --sticky-hosts" */
/*XML b daemonMode           Work    "-d | --daemon: run as daemon flag" */
/*XML n maxNumLines          Work    "-e | --max-table-rows: maximum lines/page" */
/*XML s rFileName            Work    "-f | --traffic-dump-file: input packet capture file" */
/*XML b trackOnlyLocalHosts  Work    "-g | --track-local-hosts" */
/*XML s devices              Work    "-i | --interface" */
/*XML b enableOtherPacketDump Work "-j | --create-other-packets" */
/*XML s pcapLog              Work    "-l | --pcap-log" */
/*XML s localAddresses       Work    "-m | --local-subnets" */
/*XML b numericFlag          Work    "-n | --numeric-ip-addresses" */
/*XML b dontTrustMACaddr     Work    "-o | --no-mac" */
/*XML s protoSpecs           Work    "-p | --protocols" */
/*XML b enableSuspiciousPacketDump Work "-q | --create-suspicious-packets" */
/*XML n refreshRate          Work    "-r | --refresh-time" */
/*XML b disablePromiscuousMode Work  "-s | --no-promiscuous" */
/*XML n traceLevel           Work    "-t | --trace-level" */
/*XML n maxNumHashEntries    Work    "-x  <max num hash entries>" */
/*XML n maxNumSessions       Work    "-X  <max num TCP sessions>" */
/*XML n defaultVsan          Work    "-v | --default-vsan" */                               
/*XML s webAddr              Work    "-w | --http-server address"  */
/*XML n webPort              Work    "-w | --http-server :port" */

/*XMLSWITCH input->ipv4or6 */
/*XMLCASE AF_INET */
/*XML n:u ipv4or6            Work    "-4 | --ipv4" */
/*XMLCASE AF_INET6 */
/*XML n:u ipv4or6            Work    "-6 | --ipv6" */
/*XMLCASE DEFAULT */
/*XML n:u ipv4or6            Work    "AF_UNSPEC" */
/*XMLHCTIWS */

/*XML b enableSessionHandling Work   "-z | --disable-sessions" */
/*XML s currentFilterExpression Work "-B | --filter-expression" */
/*XML n:u samplingRate       Work    "-C | --sampling-rate" */
/*XML s domainName           Work    "-D | --domain" */
/*XML b flowSpecs            Work    "-F | --flow-spec" */
/*XML b debugMode            Work    "-K | --enable-debug" */
#ifndef WIN32
/*XML n useSyslog            Work    "-L | --use-syslog" */
#endif

/*XML b mergeInterfaces      Work    "-M | --no-interface-merge" */
/*XML s fcNSCacheFile        Work    "-N | --wwn-map" */
/*XML s pcapLogBasePath      Work    "-O | --pcap-file-path" */
/*XML s mapperURL            Work    "-U | --mapper" */

#ifdef HAVE_OPENSSL
/*XML s sslAddr              Work    "-W | --https-server address" */
/*XML n sslPort              Work    "-W | --https-server :port" */
#endif

#ifdef MAKE_WITH_SSLWATCHDOG_RUNTIME
/*XML b useSSLwatchdog       Work    "--ssl-watchdog" */
#endif

#if defined(CFG_MULTITHREADED) && defined(MAKE_WITH_SCHED_YIELD)
/*XML b disableSchedYield    Work    "--disable-schedyield" */
#endif

/*XML b w3c                  Work    "--w3c" */

/*XML s P3Pcp                Work    "--p3p-cp" */
/*XML s P3Puri               Work    "--p3p-uri" */

#if !defined(WIN32) && defined(HAVE_PCAP_SETNONBLOCK)
/*XML b setNonBlocking       Work    "--set-pcap-nonblocking" */
#endif

/*XML s instance             Work    "--instance" */
/*XML s logo                 Work    "" */

/*XML b disableStopcap       Work    "--disable-stopcap" */
/*XML b disableInstantSessionPurge Work "--disable-instantsessionpurge" */
/*XML b disableMutexExtraInfo Work   "--disable-mutexextrainfo" */

/*XML b printFcOnly          Work    "--fc-only" */
/*XML b printIpOnly          Work    "--no-fc" */
/*XML b noInvalidLunDisplay  Work    "--no-invalid-lun" */

/*XML b skipVersionCheck     Work    "--skip-version-check" */

/*XMLSECTIONEND */


/* -------------------------------------------------------------
typedef struct ntopInterface {
} NtopInterface;
 */

/*XMLSTRUCT NtopInterface Work2 Work3 */
/*XMLSECTIONBEGIN xml_s_ntopinterface.inc parent input buf2 */
/*XMLNOTE - use parent, not work, because the parent node is defined in g_intf.inc */
/*XML s              name                 parent        "" */
/*XML s              humanFriendlyName    parent        "" */
/*XML h              flags                parent        "status of the interface" */
/*XML h              addr                 parent        "" */
/*XML s              ipdot                parent        "" */
/*XML s              fqdn                 parent        "" */

/*XML in_addr        network              parent        "" */
/*XML in_addr        netmask              parent        "" */
/*XML n:u            numHosts             parent        "" */
/*XML in_addr        ifAddr               parent        "" */
/*XML time_t         started              parent        "" */
/*XML time_t         firstpkt             parent        "" */
/*XML time_t         lastpkt              parent        "" */

/*XMLNOTE skip pcap_t *pcapPtr; */
/*XMLNOTE skip pcap_dumper_t *pcapDumper; */
/*XMLNOTE skip pcap_dumper_t *pcapErrDumper */
/*XMLNOTE skip pcap_dumper_t *pcapOtherDumper */

/*XML b              virtualDevice        parent        "" */
/*XML b              activeDevice         parent        "" */
/*XML b              dummyDevice          parent        "" */
/*XML b              hasVLANs             parent        "" */
/*XML n              snaplen              parent        "" */
/*XML h              datalink             parent        "" */
/*XML s              filter               parent        "" */
/*XML n              fd                   parent        "" */

/*XML e              packetStats          parent:Work   "" */
/*XML trafficcounter receivedPkts         Work          "" */
/*XML trafficcounter droppedPkts          Work          "" */
/*XML trafficcounter ethernetPkts         Work          "" */
/*XML trafficcounter broadcastPkts        Work          "" */
/*XML trafficcounter multicastPkts        Work          "" */
/*XML trafficcounter ipPkts               Work          "" */
/*XML trafficcounter lastMinEthernetPkts  Work          "" */
/*XML trafficcounter lastFiveMinsEthernetPkts  Work     "" */
/*XML trafficcounter lastNumEthernetPkts  Work          "" */
/*XML trafficcounter lastEthernetPkts     Work          "" */
/*XML trafficcounter lastTotalPkts        Work          "" */
/*XML trafficcounter lastBroadcastPkts    Work          "" */
/*XML trafficcounter lastMulticastPkts    Work          "" */

/*XML e              byteStats            parent:Work   "" */
/*XML trafficcounter ethernetBytes        Work          "" */
/*XML trafficcounter ipBytes              Work          "" */
/*XML trafficcounter fragmentedIpBytes    Work          "" */
/*XML trafficcounter tcpBytes             Work          "" */
/*XML trafficcounter udpBytes             Work          "" */
/*XML trafficcounter otherIpBytes         Work          "" */
/*XML trafficcounter icmpBytes            Work          "" */
/*XML trafficcounter dlcBytes             Work          "" */
/*XML trafficcounter ipxBytes             Work          "" */
/*XML trafficcounter stpBytes             Work          "" */
/*XML trafficcounter decnetBytes          Work          "" */
/*XML trafficcounter netbiosBytes         Work          "" */
/*XML trafficcounter arpRarpBytes         Work          "" */
/*XML trafficcounter atalkBytes           Work          "" */
/*XML trafficcounter egpBytes             Work          "" */
/*XML trafficcounter osiBytes             Work          "" */
/*XML trafficcounter ipv6Bytes            Work          "" */
/*XML trafficcounter otherBytes           Work          "" */
/*XML trafficcounter lastMinEthernetBytes Work          "" */
/*XML trafficcounter lastFiveMinsEthernetBytes Work     "" */
/*XML trafficcounter lastEthernetBytes    Work          "" */
/*XML trafficcounter lastIpBytes          Work          "" */
/*XML trafficcounter lastNonIpBytes       Work          "" */

/*XMLNOTE TODO PortCounter    *ipPorts[MAX_IP_PORT]; */

/*XML &packetstats rcvdPktStats!RcvdPktStats parent     "" */
/*XML &ttlstats      rcvdPktTTLStats      parent        "" */

/*XML e              throughputStats      parent:Work   "" */
/*XML n:f            peakThroughput       Work          "" */
/*XML n:f            actualThpt           Work          "" */
/*XML n:f            lastMinThpt          Work          "" */
/*XML n:f            lastFiveMinsThpt     Work          "" */
/*XML n:f            peakPacketThroughput Work          "" */
/*XML n:f            actualPktsThpt       Work          "" */
/*XML n:f            lastMinPktsThpt      Work          "" */
/*XML n:f            lastFiveMinsPktsThpt Work          "" */
/*XML time_t         lastThptUpdate       Work          "" */
/*XML time_t         lastMinThptUpdate    Work          "" */
/*XML time_t         lastHourThptUpdate   Work          "" */
/*XML time_t         lastFiveMinsThptUpdate Work        "" */
/*XML n:f            throughput           Work          "" */
/*XML n:f            packetThroughput     Work          "" */
/*XML n:u            numThptSamples       Work          "" */
/*XML e              last60MinutesThpt    Work:Work2    "" */
/*XML n:u            last60MinutesThptIdx Work2         "" */

/*XMLFOR indexT 0 59 <= */
/*XML *              indexT               Work2:Work3   "" 
  safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexT);
  elWork3 = newxml(elWork2, "throughput", "index", buf, "description", "");
  XML*/
/*XMLIF input->last60MinutesThpt[indexT].trafficValue != 0.0 */
/*XML &thptentry     last60MinutesThpt[indexT] Work3         "" */
/*XMLFI */
/*XMLROF*/

/*XML e              last24HoursThpt      Work:Work2    "" */
/*XML n:u            last24HoursThptIdx   Work2         "" */

/*XMLFOR indexT 0 23 <= */
/*XML *              indexT               Work2:Work3   "" 
  safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexT);
  elWork3 = newxml(elWork2, "throughput", "index", buf, "description", "");
  XML*/
/*XMLIF input->last24HoursThpt[indexT].trafficValue != 0.0 */
/*XML &thptentry     last24HoursThpt[indexT] Work3         "" */
/*XMLFI */
/*XMLROF*/

/*XML e              last30daysThpr       Work:Work2    "" */
/*XML n:u            last30daysThptIdx    Work2         "" */
/*XMLFOR indexT 0 29 <= */
/*XMLIF input->last30daysThpt[indexT] != 0.0 */
/*XML *              indexT               Work2         "" 
  safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexT);
  safe_snprintf(__FILE__, __LINE__, buf2, sizeof(buf2), "%f", input->last30daysThpt[indexT]);
  newxml(elWork2, "index", buf, "value", buf2, "");
  XML*/
/*XMLFI*/
/*XMLROF*/

/*XML e              protocolStats        parent:Work   "" */
/*XML e              tcp                  Work:Work2    "" */
/*XML &simpleprototrafficinfo tcpGlobalTrafficStats  Work2 "" */
/*XML e              udp                  Work:Work2    "" */
/*XML &simpleprototrafficinfo udpGlobalTrafficStats  Work2 "" */
/*XML e              icmp                 Work:Work2    "" */
/*XML &simpleprototrafficinfo icmpGlobalTrafficStats Work2 "" */
/*XMLFOR iProtoIndex 0 myGlobals.numIpProtosToMonitor */
/*XMLPREFIX myGlobals */
/*XML s ipTrafficProtosNames[iProtoIndex]!ipprotocol Work:Work2 "" */
/*XMLPREFIX input */
/*XML &simpleprototrafficinfo ipProtoStats[iProtoIndex] Work2 "" */
/*XMLROF */

/*XML trafficcounter numEstablishedTCPConnections parent "" */

/*XML n:u            hostsno              parent        "" */
/*XML n:u            actualHashSize       parent        "" */

/*XMLNOTE Special handling for the big sub-structures */
/*XMLNOTE ipSession ... */
/*XMLNOTE ipTrafficMatrix ... */
/*XMLNOTE ipTrafficMatrixHosts ... */

/*XMLSECTIONEND */


/* -------------------------------------------------------------
typedef struct hostTraffic {
} HostTraffic;
 */

/*XMLSTRUCT HostTraffic */
/*XMLSECTIONBEGIN xml_s_hosttraffic.inc parent input */
/*XMLIF input->magic != CONST_MAGIC_NUMBER */
/*XML n:u magic                             parent              "Invalid" */
/*XMLELSE */
/*XML n:u magic                             parent              "" */
/*XMLFI */
/*XMLIF input->l2Family == FLAG_HOST_TRAFFIC_AF_FC */

/*XML n:u l2Family                          parent              "Fibre Channel" */
/*XMLELSE
/*XMLIF input->l2Family == FLAG_HOST_TRAFFIC_AF_ETH */
/*XML n:u l2Family                          parent              "Ethernet" */
/*XMLELSE
/*XML n:u l2Family                          parent              "Unknown" */
/*XML *
#if (XMLDUMP_DEBUG >= 3)
      traceEvent(CONST_TRACE_INFO, "XMLDUMP_DEBUG: Ending newxml_hosttraffic - unknown family");
#endif
      return;
  XML*/
/*XMLFI */
/*XMLFI */
/*XML n:u hostTrafficBucket                 parent              "" */
/*XML n:u originalHostTrafficBucket         parent              "" */
/*XML n:u refCount                          parent              "" */
/*XML &hostserial hostSerial                parent              "" */
/*XML &hostaddr hostIpAddress               parent              "" */
/*XML n vlanId                              parent              "" */
/*XML n hostAS                              parent              "" */
/*XML time_t firstSeen                      parent              "" */
/*XML time_t lastSeen                       parent              "" */
/*XML ethaddress ethAddress                 parent              "" */
/*XML s:u lastEthAddress                    parent              "" */
/*XML s ethAddressString                    parent              "" */
/*XML s hostNumIpAddress                    parent              "" */
/*XML s hwModel                             parent              "" */
/*XML s description                         parent              "" */
/*XML s ip2ccValue                          parent              "" */
/*XML s hostResolvedName                    parent              "" */
/*XML n hostResolvedNameType                parent              "" */
/*XML s fingerprint                         parent              "" */
/*XML n:u minTTL                            parent              "" */
/*XML n:u maxTTL                            parent              "" */
/*XML timeval minLatency                    parent              "" */
/*XML timeval maxLatency                    parent              "" */

typedef struct hostTraffic {

/*XML e nonip                               parent:Work         "" */
  NonIPTraffic     *nonIPTraffic;
  NonIpProtoTrafficInfo *nonIpProtoTrafficInfos; /* Info about further non IP protos */

/*XML e flags                               parent:Work         "BitFlags" */
/*XML b theDomainHasBeenComputed(input)     Work                "" */
/*XML b subnetLocalHost(input)              Work                "" */
/*XML b privateIPAddress(input)             Work                "" */
/*XML b broadcastHost(input)                Work                "" */
/*XML b multicastHost(input)                Work                "" */
/*XML b gatewayHost(input)                  Work                "" */
/*XML b nameServerHost(input)               Work                "" */
/*XML b subnetPseudoLocalHost(input)        Work                "" */
/*XML b isServer(input)                     Work                "" */
/*XML b isWorkstation(input)                Work                "" */
/*XML b isMasterBrowser(input)              Work                "" */
/*XML b isMultihomed(input)                 Work                "" */
/*XML b isPrinter(input)                    Work                "" */
/*XML b isSMTPhost(input)                   Work                "" */
/*XML b isPOPhost(input)                    Work                "" */
/*XML b isIMAPhost(input)                   Work                "" */
/*XML b isDirectoryHost(input)              Work                "" */
/*XML b isFTPhost(input)                    Work                "" */
/*XML b isHTTPhost(input)                   Work                "" */
/*XML b isWINShost(input)                   Work                "" */
/*XML b isBridgeHost(input)                 Work                "" */
/*XML b isDHCPClient(input)                 Work                "" */
/*XML b isDHCPServer(input)                 Work                "" */
/*XML b isP2P(input)                        Work                "" */
/*XML b isNtpServer(input)                  Work                "" */
/*XML b hasWrongNetmask(input)              Work                "" */
/*XML b hasDuplicatedMac(input)             Work                "" */
/*XML b hasSentIpDataOnZeroPort(input)      Work                "" */

/*XML e totalcounts                         parent:Work         "" */
/*XML trafficcounter pktSent                Work                "" */
/*XML trafficcounter pktRcvd                Work                "" */
/*XML trafficcounter pktSentSession         Work                "" */
/*XML trafficcounter pktRcvdSession         Work                "" */
/*XML trafficcounter pktDuplicatedAckSent   Work                "" */
/*XML trafficcounter pktDuplicatedAckRcvd   Work                "" */
/*XML trafficcounter lastPktSent            Work                "" */
/*XML trafficcounter lastPktRcvd            Work                "" */
/*XML trafficcounter pktBroadcastSent       Work                "" */
/*XML trafficcounter bytesBroadcastSent     Work                "" */
/*XML trafficcounter pktMulticastSent       Work                "" */
/*XML trafficcounter bytesMulticastSent     Work                "" */
/*XML trafficcounter pktMulticastRcvd       Work                "" */
/*XML trafficcounter bytesMulticastRcvd     Work                "" */
/*XML trafficcounter lastBytesSent          Work                "" */
/*XML trafficcounter lastHourBytesSent      Work                "" */
/*XML trafficcounter bytesSent              Work                "" */
/*XML trafficcounter bytesSentLoc           Work                "" */
/*XML trafficcounter bytesSentRem           Work                "" */
/*XML trafficcounter bytesSentSession       Work                "" */
/*XML trafficcounter lastBytesRcvd          Work                "" */
/*XML trafficcounter lastHourBytesRcvd      Work                "" */
/*XML trafficcounter bytesRcvd              Work                "" */
/*XML trafficcounter bytesRcvdLoc           Work                "" */
/*XML trafficcounter bytesRcvdFromRem       Work                "" */
/*XML trafficcounter bytesRcvdSession       Work                "" */

/*XML e throughput                          parent:Work         "" */
/*XML n:f actualRcvdThpt                    Work                "" */
/*XML n:f lastHourRcvdThpt                  Work                "" */
/*XML n:f averageRcvdThpt                   Work                "" */
/*XML n:f peakRcvdThpt                      Work                "" */
/*XML n:f actualSentThpt                    Work                "" */
/*XML n:f lastHourSentThpt                  Work                "" */
/*XML n:f averageSentThpt                   Work                "" */
/*XML n:f peakSentThpt                      Work                "" */
/*XML n:f actualTThpt                       Work                "" */
/*XML n:f averageTThpt                      Work                "" */
/*XML n:f peakTThpt                         Work                "" */
/*XML n:f actualRcvdPktThpt                 Work                "" */
/*XML n:f averageRcvdPktThpt                Work                "" */
/*XML n:f peakRcvdPktThpt                   Work                "" */
/*XML n:f actualSentPktThpt                 Work                "" */
/*XML n:f averageSentPktThpt                Work                "" */
/*XML n:f peakSentPktThpt                   Work                "" */
/*XML n:f actualTPktThpt                    Work                "" */
/*XML n:f averageTPktThpt                   Work                "" */
/*XML n:f peakTPktThpt                      Work                "" */
/*XML n:u actBandwidthUsage                 Work                "" */
/*XML n:u actBandwidthUsageS                Work                "" */
/*XML n:u actBandwidthUsageR                Work                "" */

/*XML e traffic                             parent:Work         "" */
  TrafficDistribution *trafficDistribution;
/*XML n:u numHostSessions                   Work                "" */

/*XML e routing                             parent:Work         "" */
  RoutingCounter   *routedTraffic;

/*XML e tcpip                               parent:Work         "" */
  PortUsage        *portsUsage; /* 0...MAX_ASSIGNED_IP_PORTS */
  int recentlyUsedClientPorts[MAX_NUM_RECENT_PORTS];
  int recentlyUsedServerPorts[MAX_NUM_RECENT_PORTS];
  int otherIpPortsRcvd[MAX_NUM_RECENT_PORTS];
  int otherIpPortsSent[MAX_NUM_RECENT_PORTS];

/*XML trafficcounter ipBytesSent            Work                "" */
/*XML trafficcounter ipBytesRcvd            Work                "" */
/*XML trafficcounter ipv6Sent               Work                "" */
/*XML trafficcounter ipv6Rcvd               Work                "" */
/*XML trafficcounter tcpSentLoc             Work                "" */
/*XML trafficcounter tcpSentRem             Work                "" */
/*XML trafficcounter udpSentLoc             Work                "" */
/*XML trafficcounter udpSentRem             Work                "" */
/*XML trafficcounter icmpSent               Work                "" */
/*XML trafficcounter icmp6Sent              Work                "" */
/*XML trafficcounter tcpRcvdLoc             Work                "" */
/*XML trafficcounter tcpRcvdFromRem         Work                "" */
/*XML trafficcounter udpRcvdLoc             Work                "" */
/*XML trafficcounter udpRcvdFromRem         Work                "" */
/*XML trafficcounter icmpRcvd               Work                "" */
/*XML trafficcounter icmp6Rcvd              Work                "" */
/*XML trafficcounter tcpFragmentsSent       Work                "" */
/*XML trafficcounter tcpFragmentsRcvd       Work                "" */
/*XML trafficcounter udpFragmentsSent       Work                "" */
/*XML trafficcounter udpFragmentsRcvd       Work                "" */
/*XML trafficcounter icmpFragmentsSent      Work                "" */
/*XML trafficcounter icmpFragmentsRcvd      Work                "" */
/*XML trafficcounter icmp6FragmentsSent     Work                "" */
/*XML trafficcounter icmp6FragmentsRcvd     Work                "" */

/*XML e protocoldecoders                    parent:Work         "" */
  ProtocolInfo     *protocolInfo;

/*XML e interestingpackets                  parent:Work         "" */
  SecurityHostProbes *secHostPkts;
  IcmpHostInfo       *icmpInfo;

/*XML e prototraffic                        parent:Work         "" */
  ShortProtoTrafficInfo **ipProtosList;        /* List of myGlobals.numIpProtosList entries */
  ProtoTrafficInfo      **protoIPTrafficInfos; /* Info about IP traffic generated/rcvd by this host */

/*XML e fiberchannel                        parent:Work         "" */
  FcScsiCounters   *fcCounters;

/*XML e peers                               parent:Work         "" */
/*XML counter totContactedSentPeers         Work                "" */
/*XML counter totContactedRcvdPeers         Work                "" */
// XML usagecounter contactedSentPeers       Work                "" */
// XML usagecounter contactedRcvdPeers       Work                "" */
// XML usagecounter contactedRouters         Work                "" */
} HostTraffic;


/*XMLSECTIONEND */


/* --------------------------------------------------NtopGlobals
   -------------------------------------------------------------
   -------------------------------------------------------------
   -------------------------------------------------------------

   Using the structs defined above, take the contents of
   ntopGlobals and break it up into the high-level structure
   we've decided upon

   ------------------------------------------------------------- */


// Per-Host (computer) data

/*XMLSECTIONBEGIN xml_g_hosts.inc root myGlobals */
/*XML e Hosts                               root:Hosts            "" */

/*XML e Host                                Hosts:Work            "Broadcast" */
/*XML hosttraffic broadcastEntry            Work                  "" */
/*XML e Host                                Hosts:Work            "Other" */
/*XML hosttraffic otherHostEntry            Work                  "" */

/*XMLFOR indexDev 0 myGlobals.numDevices */
/*XML * 
    HostTraffic *el;
    int hostCount;

    safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexDev);

    sendString("<!-- .........Dumping device ");
    sendString(buf);
    sendString(" -->\n");
    hostCount=0;

    elWork = newxml_empty(elHosts,
                          "Device",
                          buf);
    for(el=getFirstHost(indexDev); el != NULL; el=getNextHost(indexDev, el)) {

      if(++hostCount % 100 == 0) {
        safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%6d", hostCount);
        sendString("<!-- ............Dumping host ");
        sendString(buf);
        sendString(" -->\n");
      }

      switch(el->hostResolvedNameType) {
        case  FLAG_HOST_SYM_ADDR_TYPE_MAC:
                safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "0x%08x %s", el, el->ethAddressString);
                break;
        case  FLAG_HOST_SYM_ADDR_TYPE_IP:
                safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "0x%08x %s", el, el->hostNumIpAddress);
                break;
        case  FLAG_HOST_SYM_ADDR_TYPE_NAME:
                safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "0x%08x %s", el, el->hostResolvedName);
                break;
        default:
                safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "0x%08x", el);
                break;
      }
      elWork2 = newxml_empty(elWork,
                             "Host",
                             buf);

      newxml_hosttraffic(elWork2,
                         "HostEntry",
                         el,
                         "Host");
    }
    XML*/

//TODO

// /*XMLFOR indexHash 1 myGlobals.device[indexDev].actualHashSize */
//  / * X M L  * hosttraffic hosts                 Hosts                 "" 
//        {
//          HostTraffic *el = myGlobals.device[indexDev].hash_hostTraffic[indexHash];
//          while(el != NULL) {
// /*XMLROF */
/*XMLROF */

/*XMLSECTIONEND */



// Physical and Logical network interfaces 

/*XMLSECTIONBEGIN xml_g_intf.inc root myGlobals  */
/*XML e Interfaces           root:Interfaces  "" */

/*XML n numDevices           Interfaces "" */
/*XMLFOR indexIntf 0 myGlobals.numDevices */
/*XML *   device          Interfaces            ""
    safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexIntf);
    elWork = newxml(elInterfaces, "device", "index", buf, "description", "");
    XML*/
/*XML &ntopinterface device[indexIntf] Work "" */
/*XMLROF */
/*XMLSECTIONEND */



// Configuration data (command line, web configure, control files)

/*XMLSECTIONBEGIN xml_g_cfg.inc root myGlobals buf2 */
/*XML e Configuration                       root:Configuration  "" */

/*XML s program_name                        Configuration       "" */
/*XML s separator                           Configuration       "html separator" */

/*XML e Command_Line                        Configuration:Work "" */
/*XML s startedAs                           Work             "" */
/*XML n ntop_argc                           Work             "" */
/*XML e ntop_argv                           Work:Work2       "" */
/*XML * ntop_argc                           Work2               ""
    for (i=0; i<myGlobals.ntop_argc; i++) {
      safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", i);
      newxml(elWork2, "parameter",
                 "index", buf,
                 "value", myGlobals.ntop_argv[i]);
    }
  XML*/

/*XML e saved                               Configuration:Work  "" */
/*XML &userpref savedPref                   Work                "" */
/*XML e running                             Configuration:Work  "" */
/*XML &userpref runningPref                 Work                "" */
#ifndef WIN32
/*XML * effectiveUserName                   Work                ""
    safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", myGlobals.userId);
    safe_snprintf(__FILE__, __LINE__, buf2, sizeof(buf2), "%d", myGlobals.groupId);
    newxml(elWork, "effectiveUserName",
               "name", myGlobals.effectiveUserName,
               "uid", buf,
               "gid", buf2,
               "description", "-u | --user");
  XML*/
#endif

/*XML s dbPath                              Work                "-P | --db-file-path" */
/*XML s spoolPath                           Work                "-Q | --spool-file-path" */

/*XML b enableFragmentHandling              Work                "" */
/*XML n hostsDisplayPolicy                  Work                "enum" */
/*XML n localityDisplayPolicy               Work                "enum" */

/*XML s shortDomainName                     Work                "" */

  /* search paths - set in globals-core.c from CFG_ constants set in ./configure */

/*XML e dataFileDirs                        Work:Work2          "" */
/*XML * 
  { int indexDFD;
    for(indexDFD=0; myGlobals.dataFileDirs[indexDFD] != NULL; indexDFD++) {
      safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexDFD);
      newxml(elWork2, "DataFileDirectory",
                      "index", buf,
                      "value", myGlobals.dataFileDirs[indexDFD],
                      "description", "");
    }
  }
  XML*/
/*XML e pluginDirs                          Work:Work2          "" */
/*XML *                      
  { int indexPD;            
    for(indexPD=0; myGlobals.pluginDirs[indexPD] != NULL; indexPD++) {
      safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexPD);
      newxml(elWork2, "DataFileDirectory",
                      "index", buf,
                      "value", myGlobals.pluginDirs[indexPD],
                      "description", "");
    }                    
  } 
  XML*/
/*XML e configFileDirs                      Work:Work2          "" */
/*XML *                      
  { int indexCFD;            
    for(indexCFD=0; myGlobals.configFileDirs[indexCFD] != NULL; indexCFD++) {
      safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexCFD);
      newxml(elWork2, "DataFileDirectory",
                      "index", buf,
                      "value", myGlobals.configFileDirs[indexCFD],
                      "description", "");
    }                    
  } 
  XML*/

#ifdef PARM_ENABLE_EXPERIMENTAL
/*XML b experimentalFlagSet                 Work                 "Is the 'experimental' flag set?" */
#endif

/*XML e Protocols                           Configuration:Work  "" */

/*XML e Layer1                              Work:Work2          "Frame level, e.g. Ethernet" */

/*XML e Layer2-Ethernet                     Work:Work2          "Layer 2, e.g. tcp/ip over Ethernet" */
/*XML n:u numIpProtosList                   Work2               "" */
/*XMLLINKEDLIST ProtocolsList ll ipProtosList next Work2 */

/*XML e Layer3-TCPIP                        Work:Work2          "Layer 3, e.g. dns over tcp/ip" */
/*XML n numActServices                      Work2               "" */
/*XML n:u numIpProtosToMonitor              Work2               "" */
  ServiceEntry **udpSvc, **tcpSvc;   /* the pointers to the tables of TCP/UDP Protocols to monitor */
  char **ipTrafficProtosNames;
  PortProtoMapperHandler ipPortMapper;
 
/*XML e Layer2-FibreChannel                 Work:Work2          "Layer 2, e.g. FibreChannel over Fibre or Copper" */
/*XML n:u numFcProtosToMonitor              Work2               "" */

/*XMLSECTIONEND */


// Statistics (counts about ntop)

/*XMLSECTIONBEGIN xml_g_stat.inc root myGlobals */
/*XML e Statistics                          root:Statistics     "" */

/*XML e AddressResolution                   Statistics:Work     "" */
/*XML n:u dnsSniffCount                     Work                "" */
/*XML n:u dnsSniffRequestCount              Work                "" */
/*XML n:u dnsSniffFailedCount               Work                "" */
/*XML n:u dnsSniffARPACount                 Work                "" */
/*XML n:u dnsSniffStoredInCache             Work                "" */

#if defined(MAKE_ASYNC_ADDRESS_RESOLUTION)
/*XML e Queued                              Work:Work2          "" */
/*XML n:u addressQueuedCount                Work2               "" */
/*XML n:u addressQueuedDup                  Work2               "" */
/*XML n:u addressQueuedCurrent              Work2               "" */
/*XML n:u addressQueuedMax                  Work2               "" */
#endif

/*XML e IPaddr2Str                          Work:Work2          "" */
/*XML n:u numipaddr2strCalls                Work2               "" */
/*XML n:u numFetchAddressFromCacheCalls     Work2               "" */
/*XML n:u numFetchAddressFromCacheCallsOK   Work2               "" */
/*XML n:u numFetchAddressFromCacheCallsFAIL Work2               "" */
/*XML n:u numFetchAddressFromCacheCallsSTALE Work2              "" */
/*XML n:u numResolveAddressCalls            Work2               "" */
/*XML n:u numResolveNoCacheDB               Work2               "" */
/*XML n:u numResolveCacheDBLookups          Work2               "" */
/*XML n:u numResolvedFromCache              Work2               "" */
/*XML n:u dnsCacheStoredLookup              Work2               "" */
/*XML n:u numAttemptingResolutionWithDNS    Work2               "" */
/*XML n:u numResolvedWithDNSAddresses       Work2               "" */
/*XML n:u numDNSErrorHostNotFound           Work2               "" */
/*XML n:u numDNSErrorNoData                 Work2               "" */
/*XML n:u numDNSErrorNoRecovery             Work2               "" */
/*XML n:u numDNSErrorTryAgain               Work2               "" */
/*XML n:u numDNSErrorOther                  Work2               "" */
/*XML n:u numKeptNumericAddresses           Work2               "" */

#ifdef PARM_USE_HOST
/*XML n:u numResolvedFromHostAddresses      Work2               "" */
#endif

/*XML e WebServer                           Statistics:Work     "" */
/*XML n:u numHandledSIGPIPEerrors           Work                "" */

/*XMLSECTIONEND */



// Internals (misc internal stuff)

/*XMLSECTIONBEGIN xml_g_int.inc root myGlobals buf2 buf3 */
/*XML e Internals                           root:Internals      "" */

/*XML e Instance                            Internals:Work      "" */
/*XML n basentoppid                         Work                "" */
/*XML n childntoppid                        Work                "" */

/*XML e WebServer                           Internals:Work      "" */
/*XML b securityItemsLoaded                 Work                "" */
/*XML b haveASN                             Work                "" */
/*XML b haveVLANs                           Work                "" */
/*XML e I18N                                Work:Work2          "" */
#ifdef MAKE_WITH_I18N
/*XML s defaultLanguage                     Work2               "" */
/*XML n maxSupportedLanguages               Work2               "" */
/*XMLFOR indexL 0 myGlobals.maxSupportedLanguages */
/*XML *              indexT                 Work2               "" 
  safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexL);
  safe_snprintf(__FILE__, __LINE__, buf2, sizeof(buf2), "%d", myGlobals.supportedLanguages[indexL]);
  safe_snprintf(__FILE__, __LINE__, buf3, sizeof(buf3), "%d", myGlobals.strftimeFormat[indexL]);
  newxml(elWork2, "Language" "index", buf, "Name", buf2, "TimeFormat", buf3);
  XML*/
/*XMLROF */
#endif /* MAKE_WITH_I18N */

#ifdef HAVE_OPENSSL
/*XML n sslInitialized                      Work                "" */
#endif /* HAVE_OPENSSL */

#if defined(MAX_NUM_BAD_IP_ADDRESSES) && (MAX_NUM_BAD_IP_ADDRESSES > 0)
/*XML e BadGuys                             Work:Work2          "" */

/*XML * MAX_NUM_BAD_IP_ADDRESSES            Work2               ""
    newxml_simplenumeric(elWork2,
                            "MAX_NUM_BAD_IP_ADDRESSES",
                            MAX_NUM_BAD_IP_ADDRESSES,
                            "",
                            "%d");
  XML*/

/*XMLFOR indexB 0 MAX_NUM_BAD_IP_ADDRESSES */

/*XMLIF myGlobals.weDontWantToTalkWithYou[indexB].count > 0 */
/*XML * indexB                              Work2:Work3         "" 
  safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexB);
  newxml_smartstring(elWork2, "index", buf, "");
  XML*/
/*XML &badguysaddr weDontWantToTalkWithYou[indexB] Work3        "" */

/*XMLFI */

/*XMLROF */

#endif

/*XML time_t nextFingerprintScan            Internals           "" */

/*XML n capturePackets                      Internals           "" */
/*XML n endNtop                             Internals           "" */
/*XML n:u resetHashNow                      Internals           "" */

#ifdef PARM_SHOW_NTOP_HEARTBEAT
/*XML n:u heartbeatCounter                  Internals           "" */
#endif
#ifdef CFG_MULTITHREADED
/*XML e ThreadInfo                          Internals:Work      "" */
/*XML n:u numThreads                        Work                "" */
/*XML n:u dequeueThreadId                   Work                "pthread_t" */
/*XML n:u scanIdleThreadId                  Work                "pthread_t" */
/*XML n:u scanFingerprintsThreadId          Work                "pthread_t" */

/*XML e DequeueThreads                      Work:Work2          "" */
/*XML n:u numDequeueThreads                 Work2               "" */
 
#ifdef MAKE_ASYNC_ADDRESS_RESOLUTION
/*XMLFOR indexT 0 MAX_NUM_DEQUEUE_THREADS */
/*XML *              indexT                 Work2:Work3         "" 
  safe_snprintf(__FILE__, __LINE__, buf, sizeof(buf), "%d", indexT);
  safe_snprintf(__FILE__, __LINE__, buf2, sizeof(buf2), "%d", myGlobals.dequeueAddressThreadId[indexT]);
  newxml(elWork2, "DequeueThread", "index", buf, "thread", buf2);
  XML*/
/*XMLROF*/

#endif

/*XML n:u handleWebConnectionsThreadId      Work                "pthread_t" */

#ifdef MAKE_WITH_SSLWATCHDOG
/*XML n:u sslwatchdogChildThreadId          Work                "pthread_t" */
#endif

#endif /* CFG_MULTITHREADED */

/*XML e CheckVersion                        Internals:Work      "" */
/*XML n:u checkVersionStatus                Work                "" */
/*XML time_t checkVersionStatusAgain        Work                "" */

/*XML e LibraryVersions                     Internals:Work      "" */
/*XML s gdVersionGuessValue                 Work                "" */

/*XML n thisZone                            Internals           "seconds offset from gmt to local time" */

//TEST 
/*XML e FlowFilters                         Internals:Work      "This section is still being tested" */
/*XMLLINKEDLIST FlowFilterList ll flowsList next Work */

/*XML n:llu numPurgedHosts                  Internals           "" */
/*XML n:llu numTerminatedSessions           Internals           "" */

/*XML time_t actTime                        Internals           "" */
/*XML time_t initialSniffTime               Internals           "" */
/*XML time_t lastRefreshTime                Internals           "" */

/*XML timeval lastPktTime                   Internals           "" */

  /* Packet Capture */
/*XML e PacketCapture                       Internals:Work      "" */
#if defined(CFG_MULTITHREADED)
/*XMLNOTE Skip:  PacketInformation packetQueue[CONST_PACKET_QUEUE_LENGTH+1]; */
/*XML n:u packetQueueLen                    Work                "" */
/*XML n:u maxPacketQueueLen                 Work                "" */
/*XML n:u packetQueueHead                   Work                "" */
/*XML n:u packetQueueTail                   Work                "" */
/*XML counter receivedPackets               Work                "" */
/*XML counter receivedPacketsProcessed      Work                "" */
/*XML counter receivedPacketsQueued         Work                "" */
/*XML counter receivedPacketsLostQ          Work                "" */
#endif

  TransactionTime transTimeHash[CONST_NUM_TRANSACTION_ENTRIES];

  u_char dummyEthAddress[LEN_ETHERNET_ADDRESS];
  u_short *mtuSize, *headerSize;

  /* (Pseudo) Local Networks */
  u_int32_t localNetworks[MAX_NUM_NETWORKS][3]; /* [0]=network, [1]=mask, [2]=broadcast */
  u_short numLocalNetworks;

/*XML e MemoryUsage                         Internals:Work      "" */
#ifdef MEMORY_DEBUG
/*XML n:u allocatedMemory                   Work                "" */
#endif

#if defined(HAVE_MALLINFO_MALLOC_H) && defined(HAVE_MALLOC_H) && defined(__GNUC__)
/*XML n:u baseMemoryUsage                   Work                "" */
#endif

/*XML n:u ipTrafficMatrixMemoryUsage        Work                "" */
/*XML n:u fcTrafficMatrixMemoryUsage        Work                "" */

/*XML e Flags                               Internals:Work      "" */
/*XML b webInterfaceDisabled                Work                "" */
/*XML b enableIdleHosts                     Work                "" */

  int actualReportDeviceId;
  short columnSort, reportKind, sortFilter;
  int sock, newSock;
#ifdef HAVE_OPENSSL
  int sock_ssl;
#endif

/*XML n numChildren                         Internals           "" */

/*XML e RRD                                 Internals:Work      "" */
/*XML s rrdPath                             Work                "" */
#ifndef WIN32
/*XML h rrdDirectoryPermissions             Work                "" */
/*XML h rrdUmask                            Work                "" */
#endif

  /* http.c */
/*XML e WebServer                           Internals:Work      "" */
/*XML n:u webServerRequestQueueLength       Work                "" */
/*XML e HTTP                                Work:Work2          "" */
/*XML n:lu numHandledRequests[0]            Work2               "" */
/*XML n:lu numHandledBadrequests[0]         Work2               "" */
/*XML n:lu numSuccessfulRequests[0]         Work2               "" */
/*XML n:lu numUnsuccessfulInvalidrequests[0] Work2              "" */
/*XML n:lu numUnsuccessfulInvalidmethod[0]  Work2               "" */
/*XML n:lu numUnsuccessfulInvalidversion[0] Work2               "" */
/*XML n:lu numUnsuccessfulTimeout[0]        Work2               "" */
/*XML n:lu numUnsuccessfulNotfound[0]       Work2               "" */
/*XML n:lu numUnsuccessfulDenied[0]         Work2               "" */
/*XML n:lu numUnsuccessfulForbidden[0]      Work2               "" */
/*XML e HTTPS                               Work:Work2          "" */
/*XML n:lu numHandledRequests[1]            Work2               "" */
/*XML n:lu numHandledBadrequests[1]         Work2               "" */
/*XML n:lu numSuccessfulRequests[1]         Work2               "" */
/*XML n:lu numUnsuccessfulInvalidrequests[1] Work2              "" */
/*XML n:lu numUnsuccessfulInvalidmethod[1]  Work2               "" */
/*XML n:lu numUnsuccessfulInvalidversion[1] Work2               "" */
/*XML n:lu numUnsuccessfulTimeout[1]        Work2               "" */
/*XML n:lu numUnsuccessfulNotfound[1]       Work2               "" */
/*XML n:lu numUnsuccessfulDenied[1]         Work2               "" */
/*XML n:lu numUnsuccessfulForbidden[1]      Work2               "" */
#ifdef MAKE_WITH_SSLWATCHDOG
/*XML n:lu numHTTPSrequestTimeouts          Work2               "" */
#endif
/*XML n:lu numSSIRequests                   Work2               "" */
/*XML n:lu numBadSSIRequests                Work2               "" */
/*XML n:lu numHandledSSIRequests            Work2               "" */

/*XML e Protocols                           Internals:Work      "" */
/*XML e Layer1                              Work:Work2          "Frame level, e.g. Ethernet" */
/*XML e Layer2-Ethernet                     Work:Work2          "Layer 2, e.g. tcp/ip over Ethernet" */
/*XML e VendorLookupFile                    Work2:Work3         "" */
/*XML n numVendorLookupRead                 Work3              "" */
/*XML n numVendorLookupAdded                Work3              "" */
/*XML n numVendorLookupAddedSpecial         Work3              "" */
/*XML n numVendorLookupCalls                Work3              "" */
/*XML n numVendorLookupSpecialCalls         Work3              "" */
/*XML n numVendorLookupFound48bit           Work3              "" */
/*XML n numVendorLookupFound24bit           Work3              "" */
/*XML n numVendorLookupFoundMulticast       Work3              "" */
/*XML n numVendorLookupFoundLAA             Work3              "" */
/*XML e Layer3-TCPIP                        Work:Work2          "Layer 3, e.g. dns over tcp/ip" */
#ifdef PARM_USE_SESSIONS_CACHE
  IPSession   *sessionsCache[MAX_SESSIONS_CACHE_LEN];
#endif
/*XML e Layer2-FiberChannel                 Work:Work2          "Layer 2, e.g. FibreChannel over Fibre or Copper" */
#ifdef PARM_USE_SESSIONS_CACHE
  FCSession   *fcSessionsCache[MAX_SESSIONS_CACHE_LEN];
#endif

  /* Memory cache */
  HostTraffic *hostsCache[MAX_HOSTS_CACHE_LEN];
  u_short      hostsCacheLen, hostsCacheLenMax;
  int          hostsCacheReused;

#ifdef PARM_USE_SESSIONS_CACHE
  u_short      sessionsCacheLen;
  u_short      sessionsCacheLenMax;
  int          sessionsCacheReused;
#endif

  /* Peer2Peer Protocol Indexes */
  u_short GnutellaIdx, KazaaIdx, WinMXIdx, DirectConnectIdx, FTPIdx, EdonkeyIdx, BitTorrentIdx, VoipIdx;

  /* Hash table collisions - counted during load */
  int ipxsapHashLoadCollisions;
  /* Hash table sizes - counted during load */
  int ipxsapHashLoadSize;
  /* Hash table collisions - counted during use */
  int hashCollisionsLookup;

  /* Country flags */
  IPNode *countryFlagHead;
  int  ipCountryMem, ipCountryCount;

  /* AS */
  IPNode *asHead;
  int    asMem, asCount;

  /* LogView */
  char ** logView;         /* vector of log messages */
  int logViewNext;
#ifdef CFG_MULTITHREADED
  PthreadMutex logViewMutex;
#endif

  /* SCSI */
  char scsiDefaultDevType;
  char displayOption;
  FcNameServerCacheEntry **fcnsCacheHash;
  u_int32_t fcMatrixHashCollisions, fcMatrixHashUnresCollisions;

  int warnedAboutPathologicalVLANS;

/*XMLSECTIONEND */


/* ************************************************************* */
/* ************************************************************* */

/*XMLSECTIONBEGIN xml_g_cmdopt.inc root myGlobals buf2 */
/*XMLNOTE BOGUS - define this file so the old (3.1 release) Makefile still works... */
/*XMLSECTIONEND */

