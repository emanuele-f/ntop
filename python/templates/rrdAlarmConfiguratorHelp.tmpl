<p>&nbsp;</p>
<h3>RRDAlarm</h3>
<p>RRDAlarm is a tool that allow you to generate alarms based on some threshold defined in a configuration file. These alarms can be set to trigger a certain action that can also be defined for a specific threshold. The idea behind this is to let the program periodically check for the trespassing of one or more threshold, any of these events will be reported to you in the form that you decided at configuration time. This piece of software is written in python and included in <b>ntop</b> throught two dynamic loaded modules, ntop and host (look at python.c), provided as an extension to python by   <b>ntop</b> itself. If you want to contribute or  extend <b>ntop</b> with some python scripts, or if you want to give us some ideas to improve the program, feel free to contact luca or gianluca.</p>

<h3>RRDAlarm configuration </h3>
<p>The generation of a properly formatted  configuration  file needed by rrdAlarm to perform the actual checking, is aided by a webpage generated by config.py. You can still provide a manually written configuration file (approriately formatted of course), place it in the right directory and call the ../python/rrdalarm/start.py script, but you'll find the configuration page to be more easy and good looking than edit everything manually. Moreover using this tool you can create multiple configuration files, load them, and have an immediate look at the threshods you set.</p>
<h3>Description</h3>
<p>On the upper left corner of the page you can see a table that tells you the default configuration file name and the current rrd files path defined in the system. You can change the name of the configuration file but for security reason you cannot change its location. Editing hte field and then loading the new namefile inserted will follow a new request to the config.py script to load the file and you'll be shown the results.</p>
<p>The table you see undeneath is the one that holds the threshols you are going to set. Every row of the table is selectable by a mouse click, once you select a row you can edit it changing the values in the input fields of the footrow of the table. Anytime you'll hit the update button the values inside the input field will be inserted in the row you selected.  Hitting the Add Row button a new row will be added at the bottom of the others and will be filled with the values of the current input fields. To deselect a row and to reset the current values of the input field just click on the Reset button. </p>
<p>To remove a row first you need to select one, than just click the Remove Row button. Due to the fact that the IDs could be a reference for you and should remain the same,  the rows will no be re-indexed; holes can happen, if you don't like them you can still click at the top of the ID column to reindex your table.</p>
<h3>Threshold format</h3>
<p>A threshold consist of an &quot;ID&quot; that represent it, an "RRD File Path" field that points to the file/s to check periodically (same expasion characters as unix shell can be used). The value inserted in this last field has to be relative to the RRD Files Path explained before. The &quot;Threshold Type&quot; you want to set, above or below. Next you must estabilish a limit &quot;Value&quot; for your threshold, any kind of numeric values are accepted. The &quot;Num. Repetitons&quot; field on the contrary requires a non negative integer, it defines the number of time the threshold can be exceeded before the alarm to trigger. The &quot;Start Time&quot; and &quot;End Time&quot; let you express the time frame you want to be checked; the values that can be inserted in these fields follow the sintax of the rrd definition of time. The next field &quot;Action To Perform&quot; contains exactly what you expect, the action to trigger if the alarm is fired.  The last field &quot;TBNA&quot; ( Time Before Next Alarm) defines the minimum number of seconds before another action will be triggerd. Must contain a non negative integer.</p>
<p>Example:</p>
<TABLE id="configuration" cellSpacing="0" cellPadding="5" border="1">
  <THEAD>
    <TR>
      <TH title="Click to reIndex this column" noWrap="nowrap" align="middle" bgColor="#f3f3f3"><A href=".">ID</A> </TH>
      <TH noWrap align="middle" bgColor="#f3f3f3">RRD File Path</TH>
      <TH noWrap align="middle" bgColor="#f3f3f3">Threshold Type</TH>
      <TH noWrap align="middle" bgColor="#f3f3f3">Value</TH>
      <TH noWrap align="middle" bgColor="#f3f3f3">Num. Repetitions</TH>
      <TH noWrap align="middle" bgColor="#f3f3f3">Start Time</TH>
      <TH noWrap align="middle" bgColor="#f3f3f3">End Time</TH>
      <TH noWrap align="middle" bgColor="#f3f3f3">Action To Perform</TH>
      <TH noWrap align="middle" bgColor="#f3f3f3" title="Time Before Next Action">TBNA</TH>
    </TR>
  </THEAD>
  <TBODY id="body">
    <TR>
      <TD align="right">1</TD>
      <TD align="left">interfaces/eth0/ethernetPkts.rrd</TD>
      <TD align="center">above <img class="tooltip" border="0" src="/arrow_up.png"/></TD>
      <TD align="right">0.0</TD>
      <TD align="right">0</TD>
      <TD align="right">now-1h</TD>
      <TD align="right">now</TD>
      <TD align="left">emailme</TD>
      <TD align="right">0</TD>
    </TR>
  </TBODY>
</TABLE>
<h3>Save Configuration</h3>
<p>All the modifications you made to the table are non-persistant, meaning you HAVE to click to the Save Config button at the bottom of the table in order to save the config file on disk. Another thing, every time you save the config file pressing this button the start.py script have to rebuild a tempFile used to mantain the correct thresholds and the valid files that each of them refer to.</p>
<p>&nbsp;</p>
<p class="footrow">RRDAlarm by <a class="mailto" href="mailto:&#103;&#109;&#101;&#100;&#105;&#99;&#105;&#064;&#110;&#116;&#111;&#112;&#046;&#111;&#114;&#103;">Gianluca Medici</a>.